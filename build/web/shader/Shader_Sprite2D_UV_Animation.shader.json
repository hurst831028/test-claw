Shader3D Start
{
    type:Shader3D,
    name:Shader_Sprite2DUVAnimation,
    enableInstancing:true,
    supportReflectionProbe:true,
    shaderType:2,
    uniformMap: {
        u_UVSpeed : {type: Vector2, default:[1,1]},
        u_Time : {type: Float, default:1.0},
        u_TilingOffset :{type: Vector4, default:[1,1,1,1]},
    }
    attributeMap: {
        a_posuv: Vector4,
        a_attribColor: Vector4,
        a_attribFlags: Vector4,
    },
    defines: {
        TEXTUREVS: { type: bool, default: true }
    }
    shaderPass:[
        {
            pipeline:Forward,
            VS:textureVS,
            FS:texturePS
        }
    ]
}
Shader3D End

GLSL Start
#defineGLSL textureVS

    #define SHADER_NAME Sprite2DTextureShader
    #include "Sprite2DVertex.glsl";
    #include "Sprite3DVertex.glsl";
    //varying float u_Time;
    //varying vec2 u_uvSpeed; // UV 动画速度
    //varying vec2 texcoordAlpha;

    void main() {
	    vertexInfo info;
	    getVertexInfo(info);

	    v_cliped = info.cliped;
	    v_texcoordAlpha = info.texcoordAlpha;
	    v_useTex = info.useTex;
	    v_color = info.color;

	    vec4 pos;
	    getPosition(pos);
	    gl_Position = pos;

        v_texcoordAlpha.xy = transformUV(v_texcoordAlpha.xy, u_TilingOffset);

        // 计算动画 UV，确保 UV 的计算符合 vec2 类型
        vec2 animatedUV = v_texcoordAlpha.xy + u_UVSpeed * u_Time;
        v_texcoordAlpha.xy = animatedUV; // 应该是 vec2 类型，确保赋值一致
    }

#endGLSL

#defineGLSL texturePS
    #define SHADER_NAME Sprite2DTextureShader
    //texture和fillrect使用的。
    #if defined(GL_FRAGMENT_PRECISION_HIGH) // 原来的写法会被我们自己的解析流程处理，而我们的解析是不认内置宏的，导致被删掉，所以改成 if defined 了
        precision highp float;
    #else
        precision mediump float;
    #endif

    #include "Sprite2DFrag.glsl";

    void main()
    {
        clip();
        vec4 color = getSpriteTextureColor();
        setglColor(color);
    }
    
#endGLSL
GLSL End


