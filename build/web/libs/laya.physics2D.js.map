{"version":3,"names":["PhysicsShape","FixtureBox2DDef","Physics2DOption","allowSleeping","gravity","x","y","customUpdate","velocityIterations","positionIterations","pixelRatio","debugDraw","drawShape","drawJoint","drawAABB","drawCenterOfMass","Physics2D","EventDispatcher","constructor","this","_eventList","I","_I","enableDebugDraw","enable","_factory","createDebugDraw","drawFlags_shapeBit","removeDebugDraw","flag","appendFlags","clearFlags","drawFlags_jointBit","drawFlags_aabbBit","drawPair","drawFlags_pairBit","drawFlags_centerOfMassBit","initialize","then","start","Promise","resolve","destroyWorld","_enabled","ILaya","physicsTimer","clear","_update","_emptyBody","createBody","_rigiBodyList","SingletonList","_updataattributeLists","LayaEnv","isPlaying","frameLoop","addRigidBody","body","add","removeRigidBody","remove","updataRigidBodyAttribute","removeRigidBodyAttribute","i","n","length","elements","updatePhysicsAttribute","delta","Math","min","timer","update","_updatePhysicsTransformToRender","len","sendEvent","updatePhysicsTransformToRender","stop","value","getBodyCount","bodyCount","getContactCount","contactCount","getJointCount","jointCount","worldRoot","_worldRoot","stage","p","localToGlobal","Point","TEMP","setTo","shiftOrigin","updatePhysicsByWorldRoot","Laya","addInitCallback","RigidBody2DInfo","position","Vector2","linearVelocity","RigidBody","Component","_type","_allowSleep","_angularVelocity","_angularDamping","_linearVelocity","_linearDamping","_bullet","_allowRotation","_gravityScale","group","category","mask","label","_createBody","_body","owner","factory","sp","defRigidBodyDef","setValue","globalPosX","globalPosY","angle","Utils","toRadian","globalRotation","allowSleep","angularDamping","bullet","fixedRotation","gravityScale","linearDamping","obj","type","angularVelocity","rigidBodyDef_Create","_needrefeshShape","_updateBodyType","set_rigidBody_type","_onAwake","cacheGlobal","on","_globalChangeHandler","changeFlag","_onEnable","set_RigibBody_Transform","comps","getComponents","ColliderBase","collider","rigidBody","refresh","retSet_rigidBody_MassData","set_rigidbody_Awake","event","get_rigidBody_IsAwake","pos","TempVector2","get_RigidBody_Position","toAngle","get_RigidBody_Angle","setGlobalPos","_onDisable","off","removeBody","_onDestroy","getBody","_getOriBody","applyForce","force","rigidBody_applyForce","applyForceToCenter","rigidBody_applyForceToCenter","applyLinearImpulse","impulse","rigidbody_ApplyLinearImpulse","applyLinearImpulseToCenter","rigidbody_ApplyLinearImpulseToCenter","applyTorque","torque","rigidbody_applyTorque","setVelocity","velocity","set_rigidBody_linearVelocity","setAngle","getMass","get_rigidbody_Mass","getCenter","get_rigidBody_Center","getWorldCenter","get_rigidBody_WorldCenter","set_rigidBody_gravityScale","allowRotation","set_rigidBody_allowRotation","set_rigidBody_allowSleep","set_rigidBody_angularDamping","get_rigidBody_angularVelocity","set_rigidBody_angularVelocity","set_rigidBody_linearDamping","vec","get_rigidBody_linearVelocity","Array","set_rigidBody_bullet","getWorldPoint","_getGlobalCacheLocalToGlobal","getLocalPoint","_getGlobalCacheGlobalToLocal","Sprite","Sprite_GlobalDeltaFlage_Position_X","Sprite_GlobalDeltaFlage_Position_Y","Sprite_GlobalDeltaFlage_Rotation","Sprite_GlobalDeltaFlage_Scale_X","Sprite_GlobalDeltaFlage_Scale_Y","_x","_needupdataShapeAttribute","_y","scaleX","globalScaleX","scaleY","globalScaleY","super","_isSensor","_density","_friction","_restitution","_singleton","_setShapeData","shape","pivotoffx","pivotX","pivotoffy","pivotY","createfixture","def","TempDef","density","friction","isSensor","restitution","_physicShape","fixtureDef","createFixtureDef","_shape","fixture","resetFixtureData","getComponent","enabled","set_fixtureDef_GroupIndex","set_fixtureDef_CategoryBits","set_fixtureDef_maskBits","set_fixture_collider","rigidBody_DestroyFixture","BoxCollider","_width","_height","BoxShape","helfW","helfH","center","set_collider_SetAsBox","abs","width","height","ChainCollider","_points","_datas","_loop","ChainShape","set_ChainShape_data","points","onAdded","push","arr","split","parseInt","datas","loop","CircleCollider","_radius","CircleShape","scale","max","radius","set_CircleShape_radius","set_CircleShape_pos","EdgeCollider","EdgeShape","set_EdgeShape_data","PolygonCollider","PolygonShape","set_PolygonShape_data","JointBase","getBodyAnchor","anchorx","anchory","node","transform","transformPointN","joint","_joint","_createJoint","getJoint_userData","getJoint_userData_destroy","removeJoint","physics2D_DistancJointDef","localAnchorA","localAnchorB","physics2D_GearJointDef","physics2D_MotorJointDef","linearOffset","physics2D_MouseJointJointDef","target","physics2D_PrismaticJointDef","anchor","axis","physics2D_PulleyJointDef","groundAnchorA","groundAnchorB","physics2D_RevoluteJointDef","physics2D_WeldJointDef","physics2D_WheelJointDef","DistanceJoint","selfAnchor","otherAnchor","collideConnected","_length","_maxLength","_minLength","_frequency","_dampingRatio","selfBody","point","_temp","bodyB","_refeahJoint","otherBody","bodyA","dampingRatio","frequency","maxLength","minLength","createDistanceJoint","set_DistanceJointStiffnessDamping","onDestroy","set_DistanceJoint_length","set_DistanceJoint_MinLength","set_DistanceJoint_MaxLength","damping","jointLength","phyToLayaValue","GetLength","GearJoint","_ratio","joint1","joint2","ratio","create_GearJoint","set_GearJoint_SetRatio","MotorJoint","_linearOffset","_angularOffset","_maxForce","_maxTorque","_correctionFactor","angularOffset","maxForce","maxTorque","correctionFactor","create_MotorJoint","set_MotorJoint_linearOffset","set_MotorJoint_SetAngularOffset","set_MotorJoint_SetMaxForce","set_MotorJoint_SetMaxTorque","set_MotorJoint_SetCorrectionFactor","MouseJoint","mouseEnabled","Event","MOUSE_DOWN","onMouseDown","MOUSE_MOVE","onMouseMove","once","MOUSE_UP","onStageMouseUp","MOUSE_OUT","anchorPos","globalToLocal","mouseX","mouseY","create_MouseJoint","set_MouseJoint_target","set_MouseJoint_frequencyAndDampingRatio","PrismaticJoint","_axis","_enableMotor","_motorSpeed","_maxMotorForce","_enableLimit","_lowerTranslation","_upperTranslation","radian","cos","sin","enableMotor","motorSpeed","maxMotorForce","enableLimit","lowerTranslation","upperTranslation","create_PrismaticJoint","set_Joint_EnableMotor","set_Joint_SetMotorSpeed","set_Joint_SetMaxMotorTorque","set_Joint_EnableLimit","set_Joint_SetLimits","atan2","PulleyJoint","selfGroundPoint","otherGroundPoint","posA","posB","groundA","groundB","create_PulleyJoint","RevoluteJoint","_maxMotorTorque","_lowerAngle","_upperAngle","global","maxMotorTorque","lowerAngle","upperAngle","create_RevoluteJoint","WeldJoint","create_WeldJoint","set_Joint_frequencyAndDampingRatio","WheelJoint","create_WheelJoint","Physics2DDebugDraw","DrawString_color","Red","Green","_camera","m_center","m_extent","m_zoom","m_width","m_height","_mG","Graphics","graphics","_textSp","_textG","addChild","render","ctx","_renderToGraphic","world","save","PIXEL_RATIO","_lineWidth","layaToPhyValue","DebugDraw","DrawDebugData","restore","PushTransform","tx","ty","translate","rotate","PopTransform","mG","textG","lineWidth","camera","c","ClassUtils","regClass"],"sources":["../../src/layaAir/laya/physics/Collider2D/ColliderStructInfo.ts","../../src/layaAir/laya/physics/Physics2DOption.ts","../../src/layaAir/laya/physics/Physics2D.ts","../../src/layaAir/laya/physics/RigidBody2DInfo.ts","../../src/layaAir/laya/physics/RigidBody.ts","../../src/layaAir/laya/physics/Collider2D/ColliderBase.ts","../../src/layaAir/laya/physics/Collider2D/BoxCollider.ts","../../src/layaAir/laya/physics/Collider2D/ChainCollider.ts","../../src/layaAir/laya/physics/Collider2D/CircleCollider.ts","../../src/layaAir/laya/physics/Collider2D/EdgeCollider.ts","../../src/layaAir/laya/physics/Collider2D/PolygonCollider.ts","../../src/layaAir/laya/physics/joint/JointBase.ts","../../src/layaAir/laya/physics/joint/JointDefStructInfo.ts","../../src/layaAir/laya/physics/joint/DistanceJoint.ts","../../src/layaAir/laya/physics/joint/GearJoint.ts","../../src/layaAir/laya/physics/joint/MotorJoint.ts","../../src/layaAir/laya/physics/joint/MouseJoint.ts","../../src/layaAir/laya/physics/joint/PrismaticJoint.ts","../../src/layaAir/laya/physics/joint/PulleyJoint.ts","../../src/layaAir/laya/physics/joint/RevoluteJoint.ts","../../src/layaAir/laya/physics/joint/WeldJoint.ts","../../src/layaAir/laya/physics/joint/WheelJoint.ts","../../src/layaAir/laya/physics/Physics2DDebugDraw.ts","../../src/layaAir/laya/physics/ModuleDef.ts"],"sourcesContent":["export enum PhysicsShape {\r\n    BoxShape,\r\n    CircleShape,\r\n    PolygonShape,\r\n    ChainShape,\r\n    EdgeShape,\r\n}\r\n\r\nexport class FixtureBox2DDef {\r\n    density: number;\r\n    friction: number;\r\n    isSensor: boolean;\r\n    restitution: number;\r\n    shape: PhysicsShape;//Box2D Shape\r\n    groupIndex: number;\r\n}","/**\r\n *  Physics2DOption 用于配置2D物理的默认参数\r\n */\r\nexport class Physics2DOption {\r\n\r\n    /**设置是否允许休眠，休眠可以提高稳定性和性能，但通常会牺牲准确性*/\r\n    static allowSleeping: boolean = false;\r\n\r\n    /**重力 （单位：像素）*/\r\n    static gravity = { x: 0, y: 9.8 };\r\n\r\n    /**是否由外部跟新*/\r\n    static customUpdate: boolean = false;\r\n\r\n    /**旋转迭代次数，增大数字会提高精度，但是会降低性能*/\r\n    static velocityIterations: number = 8;\r\n\r\n    /**位置迭代次数，增大数字会提高精度，但是会降低性能*/\r\n    static positionIterations: number = 3;\r\n\r\n    /**2D游戏默认单位为像素，物理默认单位为米，此值设置了像素和米的转换比率，默认50像素=1米*/\r\n    static pixelRatio: number = 50;\r\n\r\n    /**是否开启物理绘制*/\r\n    static debugDraw: boolean = true;\r\n\r\n    /**是否绘制形状*/\r\n    static drawShape: boolean = true;\r\n\r\n    /**是否绘制关节*/\r\n    static drawJoint: boolean = true;\r\n\r\n    /**是否绘制包围盒*/\r\n    static drawAABB: boolean = false;\r\n\r\n    /**是否绘制质心*/\r\n    static drawCenterOfMass: boolean = false;\r\n}","import { Sprite } from \"../display/Sprite\"\r\nimport { EventDispatcher } from \"../events/EventDispatcher\"\r\nimport { Point } from \"../maths/Point\"\r\nimport { ILaya } from \"../../ILaya\";\r\nimport { LayaEnv } from \"../../LayaEnv\";\r\nimport { Physics2DOption } from \"./Physics2DOption\";\r\nimport { Vector2 } from \"../maths/Vector2\";\r\nimport { IPhysiscs2DFactory } from \"./IPhysiscs2DFactory\";\r\nimport { SingletonList } from \"../utils/SingletonList\";\r\nimport { RigidBody } from \"./RigidBody\";\r\nimport { Laya } from \"../../Laya\";\r\n\r\n/**\r\n * 2D物理引擎\r\n */\r\nexport class Physics2D extends EventDispatcher {\r\n\r\n    /**@private */\r\n    private static _I: Physics2D;\r\n\r\n    /**@private 是否已经激活*/\r\n    private _enabled: boolean;\r\n\r\n    /**@private 根容器*/\r\n    private _worldRoot: Sprite;\r\n\r\n    /**@private 空的body节点，给一些不需要节点的关节使用*/\r\n    _emptyBody: any;\r\n    /**@private */\r\n    _eventList: any[] = [];\r\n\r\n    _factory: IPhysiscs2DFactory;\r\n\r\n    /**@private 需要同步实时跟新数据列表*/\r\n    _rigiBodyList: SingletonList<RigidBody>;\r\n    /**@private 需要同步物理数据的列表；使用后会及时释放*/\r\n    _updataattributeLists: SingletonList<RigidBody>;\r\n\r\n    /**全局物理单例*/\r\n    static get I(): Physics2D {\r\n        return Physics2D._I || (Physics2D._I = new Physics2D());\r\n    }\r\n\r\n    /**\r\n     * 设置物理绘制\r\n     */\r\n    set enableDebugDraw(enable: boolean) {\r\n        if (enable) {\r\n            this._factory.createDebugDraw(this._factory.drawFlags_shapeBit);\r\n        } else {\r\n            this._factory.removeDebugDraw();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 是否绘制Shape\r\n     */\r\n    set drawShape(enable: boolean) {\r\n        let flag = this._factory.drawFlags_shapeBit;\r\n        if (enable) {\r\n            this._factory.appendFlags(flag);\r\n        } else {\r\n            this._factory.clearFlags(flag);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 是否绘制Joint\r\n     */\r\n    set drawJoint(enable: boolean) {\r\n        let flag = this._factory.drawFlags_jointBit;\r\n        if (enable) {\r\n            this._factory.appendFlags(flag);\r\n        } else {\r\n            this._factory.clearFlags(flag);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 是否绘制AABB\r\n     */\r\n    set drawAABB(enable: boolean) {\r\n        let flag = this._factory.drawFlags_aabbBit;\r\n        if (enable) {\r\n            this._factory.appendFlags(flag);\r\n        } else {\r\n            this._factory.clearFlags(flag);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * 是否绘制Pair\r\n    */\r\n    set drawPair(enable: boolean) {\r\n        let flag = this._factory.drawFlags_pairBit;\r\n        if (enable) {\r\n            this._factory.appendFlags(flag);\r\n        } else {\r\n            this._factory.clearFlags(flag);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * 是否绘制CenterOfMass\r\n    */\r\n    set drawCenterOfMass(enable: boolean) {\r\n        let flag = this._factory.drawFlags_centerOfMassBit;\r\n        if (enable) {\r\n            this._factory.appendFlags(flag);\r\n        } else {\r\n            this._factory.clearFlags(flag);\r\n        }\r\n    }\r\n\r\n    enable(): Promise<void> {\r\n        if (this._factory) {\r\n            return this._factory.initialize().then(() => {\r\n                this.start();\r\n                return Promise.resolve();\r\n            });\r\n        }\r\n        else\r\n            return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n    * 销毁当前物理世界\r\n    */\r\n    destroyWorld() {\r\n        this._enabled = false;\r\n        this._factory.destroyWorld();\r\n        ILaya.physicsTimer.clear(this, this._update);\r\n    }\r\n\r\n    /**\r\n     * 开启物理世界\r\n     */\r\n    start(): void {\r\n        if (!this._enabled) {\r\n            this._enabled = true;\r\n            this._factory.start();\r\n            this.allowSleeping = Physics2DOption.allowSleeping;\r\n            this._emptyBody = this._factory.createBody(null);\r\n        } else {\r\n            ILaya.physicsTimer.clear(this, this._update);\r\n        }\r\n\r\n        if (Physics2DOption.debugDraw) {\r\n            this.enableDebugDraw = true;\r\n            this.drawShape = Physics2DOption.drawShape;\r\n            this.drawJoint = Physics2DOption.drawJoint;\r\n            this.drawAABB = Physics2DOption.drawAABB;\r\n            this.drawCenterOfMass = Physics2DOption.drawCenterOfMass;\r\n        } else {\r\n            this.enableDebugDraw = false;\r\n        }\r\n        if (!this._rigiBodyList) this._rigiBodyList = new SingletonList<RigidBody>();\r\n        else this._rigiBodyList.clear();\r\n\r\n        if (!this._updataattributeLists) this._updataattributeLists = new SingletonList<RigidBody>();\r\n        else this._updataattributeLists.clear();\r\n\r\n        if (!Physics2DOption.customUpdate && LayaEnv.isPlaying)\r\n            ILaya.physicsTimer.frameLoop(1, this, this._update);\r\n    }\r\n\r\n    /**@internal */\r\n    addRigidBody(body: RigidBody) {\r\n        this._rigiBodyList.add(body);\r\n    }\r\n\r\n    /**@internal */\r\n    removeRigidBody(body: RigidBody) {\r\n        this._rigiBodyList.remove(body);\r\n    }\r\n\r\n    /**@internal */\r\n    updataRigidBodyAttribute(body: RigidBody) {\r\n        this._updataattributeLists.add(body);\r\n    }\r\n\r\n    /**@internal */\r\n    removeRigidBodyAttribute(body: RigidBody) {\r\n        this._updataattributeLists.remove(body);\r\n    }\r\n\r\n    /**@private*/\r\n    private _update(): void {\r\n        //同步渲染世界参数到物理世界\r\n        for (var i = 0, n = this._updataattributeLists.length; i < n; i++) {\r\n            this._updataattributeLists.elements[i].updatePhysicsAttribute()\r\n        }\r\n        this._updataattributeLists.clear();\r\n        //时间步太长，会导致错误穿透\r\n        var delta = Math.min(ILaya.timer.delta / 1000, 0.033);\r\n        this._factory.update(delta);\r\n        //同步物理坐标到渲染坐标\r\n        this._updatePhysicsTransformToRender();\r\n        //同步事件\r\n        var len: number = this._eventList.length;\r\n        if (len > 0) {\r\n            for (var i: number = 0; i < len; i += 2) {\r\n                this._factory.sendEvent(this._eventList[i], this._eventList[i + 1]);\r\n            }\r\n            this._eventList.length = 0;\r\n        }\r\n    }\r\n\r\n    /**@private*/\r\n    _updatePhysicsTransformToRender() {\r\n        for (var i = 0, n = this._rigiBodyList.length; i < n; i++) {\r\n            this._rigiBodyList.elements[i].updatePhysicsTransformToRender()\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 停止物理世界\r\n     */\r\n    stop(): void {\r\n        this._rigiBodyList.clear();\r\n        this._updataattributeLists.clear();\r\n        ILaya.physicsTimer.clear(this, this._update);\r\n    }\r\n\r\n    /**\r\n     * 设置是否允许休眠，休眠可以提高稳定性和性能，但通常会牺牲准确性\r\n     */\r\n    get allowSleeping(): boolean {\r\n        return this._factory.allowSleeping;\r\n    }\r\n\r\n    set allowSleeping(value: boolean) {\r\n        this._factory.allowSleeping = value;\r\n    }\r\n\r\n    /**\r\n    * 物理世界重力环境，默认值为{x:0,y:10}\r\n    * 如果修改y方向重力方向向上，可以直接设置gravity.y=-10;\r\n    */\r\n    get gravity(): any {\r\n        return this._factory.gravity;\r\n    }\r\n\r\n    set gravity(value: Vector2) {\r\n        this._factory.gravity = value;\r\n    }\r\n\r\n    /**获得刚体总数量*/\r\n    getBodyCount(): number {\r\n        return this._factory.bodyCount;\r\n    }\r\n\r\n    /**获得碰撞总数量*/\r\n    getContactCount(): number {\r\n        return this._factory.contactCount;\r\n    }\r\n\r\n    /**获得关节总数量*/\r\n    getJointCount(): number {\r\n        return this._factory.jointCount;\r\n    }\r\n\r\n    /**物理世界根容器，将根据此容器作为物理世界坐标世界，进行坐标变换，默认值为stage\r\n     * 设置特定容器后，就可整体位移物理对象，保持物理世界不变。\r\n     * 注意，仅会在 set worldRoot 时平移一次，其他情况请配合 updatePhysicsByWorldRoot 函数使用*/\r\n    get worldRoot(): Sprite {\r\n        return this._worldRoot || ILaya.stage;\r\n    }\r\n\r\n    set worldRoot(value: Sprite) {\r\n        this._worldRoot = value;\r\n        if (value) {\r\n            //TODO：\r\n            var p: Point = value.localToGlobal(Point.TEMP.setTo(0, 0));\r\n            this._factory.shiftOrigin(-p.x, -p.y);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设定 worldRoot 后，手动触发物理世界更新\r\n     */\r\n    updatePhysicsByWorldRoot() {\r\n        if (!!this.worldRoot) {\r\n            var p: Point = this.worldRoot.localToGlobal(Point.TEMP.setTo(0, 0));\r\n            this._factory.shiftOrigin(-p.x, -p.y);\r\n        }\r\n    }\r\n}\r\n\r\nLaya.addInitCallback(() => Physics2D.I.enable());","import { Vector2 } from \"../maths/Vector2\";\r\n\r\nexport class RigidBody2DInfo {\r\n    position: Vector2 = new Vector2()\r\n    angle: number;\r\n    allowSleep: boolean\r\n    angularDamping: number;\r\n    angularVelocity: number;\r\n    bullet: boolean;\r\n    fixedRotation: boolean;\r\n    gravityScale: number;\r\n    linearDamping: number;\r\n    linearVelocity: Vector2 = new Vector2();\r\n    type: string;\r\n    group: number;\r\n}","import { ColliderBase } from \"./Collider2D/ColliderBase\";\r\nimport { Component } from \"../components/Component\"\r\nimport { Sprite } from \"..//display/Sprite\"\r\nimport { Point } from \"../maths/Point\"\r\nimport { Utils } from \"../utils/Utils\"\r\nimport { Physics2D } from \"./Physics2D\";\r\nimport { RigidBody2DInfo } from \"./RigidBody2DInfo\";\r\nimport { IV2, Vector2 } from \"../maths/Vector2\";\r\n\r\n/**\r\n * 2D刚体，显示对象通过RigidBody和物理世界进行绑定，保持物理和显示对象之间的位置同步\r\n * 物理世界的位置变化会自动同步到显示对象，显示对象本身的位移，旋转（父对象位移无效）也会自动同步到物理世界\r\n * 如果想整体位移物理世界，可以Physics2D.I.worldRoot=场景，然后移动场景即可\r\n * 可以通过IDE-\"项目设置\"-\"2D物理\"-\"是否开启2D物理绘制\" 开启物理辅助线显示，或者通过代码Physics2D.I.enableDebugDraw=true;\r\n */\r\nexport class RigidBody extends Component {\r\n\r\n    /** 用于判断节点属性更改时更新物理属性*/\r\n    private static changeFlag: number = Sprite.Sprite_GlobalDeltaFlage_Position_X | Sprite.Sprite_GlobalDeltaFlage_Position_Y | Sprite.Sprite_GlobalDeltaFlage_Rotation | Sprite.Sprite_GlobalDeltaFlage_Scale_X | Sprite.Sprite_GlobalDeltaFlage_Scale_Y\r\n    /**\r\n     * 刚体类型，支持三种类型static，dynamic和kinematic类型，默认为dynamic类型\r\n     * static为静态类型，静止不动，不受重力影响，质量无限大，可以通过节点移动，旋转，缩放进行控制\r\n     * dynamic为动态类型，受重力影响\r\n     * kinematic为运动类型，不受重力影响，可以通过施加速度或者力的方式使其运动\r\n     */\r\n    protected _type: string = \"dynamic\";\r\n    /**是否允许休眠，允许休眠能提高性能*/\r\n    protected _allowSleep: boolean = true;\r\n    /**角速度，设置会导致旋转*/\r\n    protected _angularVelocity: number = 0;\r\n    /**旋转速度阻尼系数，范围可以在0到无穷大之间，0表示没有阻尼，无穷大表示满阻尼，通常阻尼的值应该在0到0.1之间*/\r\n    protected _angularDamping: number = 0;\r\n    /**线性运动速度，比如{x:10,y:10}*/\r\n    protected _linearVelocity: any = { x: 0, y: 0 };\r\n    /**线性速度阻尼系数，范围可以在0到无穷大之间，0表示没有阻尼，无穷大表示满阻尼，通常阻尼的值应该在0到0.1之间*/\r\n    protected _linearDamping: number = 0;\r\n    /**是否高速移动的物体，设置为true，可以防止高速穿透*/\r\n    protected _bullet: boolean = false;\r\n    /**是否允许旋转，如果不希望刚体旋转，这设置为false*/\r\n    protected _allowRotation: boolean = true;\r\n    /**重力缩放系数，设置为0为没有重力*/\r\n    protected _gravityScale: number = 1;\r\n\r\n    /**[只读] 指定了该主体所属的碰撞组，默认为0，碰撞规则如下：\r\n     * 1.如果两个对象group相等\r\n     * \t\tgroup值大于零，它们将始终发生碰撞\r\n     * \t\tgroup值小于零，它们将永远不会发生碰撞\r\n     * \t\tgroup值等于0，则使用规则3\r\n     * 2.如果group值不相等，则使用规则3\r\n     * 3.每个刚体都有一个category类别，此属性接收位字段，范围为[1,2^31]范围内的2的幂\r\n     * 每个刚体也都有一个mask类别，指定与其碰撞的类别值之和（值是所有category按位AND的值）\r\n     */\r\n    group: number = 0;\r\n    /**[只读]碰撞类别，使用2的幂次方值指定，有32种不同的碰撞类别可用*/\r\n    category: number = 1;\r\n    /**[只读]指定冲突位掩码碰撞的类别，category位操作的结果*/\r\n    mask: number = -1;\r\n    /**[只读]自定义标签*/\r\n    label: string = \"RigidBody\";\r\n    /**[只读]原始刚体*/\r\n    protected _body: any;\r\n\r\n    /**\r\n     * @private \r\n     */\r\n    private _createBody(): void {\r\n        if (this._body || !this.owner) return;\r\n        let factory = Physics2D.I._factory;\r\n        var sp: Sprite = (<Sprite>this.owner);\r\n        var defRigidBodyDef = new RigidBody2DInfo();\r\n        defRigidBodyDef.position.setValue(sp.globalPosX, sp.globalPosY);\r\n        defRigidBodyDef.angle = Utils.toRadian(sp.globalRotation);\r\n        defRigidBodyDef.allowSleep = this._allowSleep;\r\n        defRigidBodyDef.angularDamping = this._angularDamping;\r\n\r\n        defRigidBodyDef.bullet = this._bullet;\r\n        defRigidBodyDef.fixedRotation = !this._allowRotation;\r\n        defRigidBodyDef.gravityScale = this._gravityScale;\r\n        defRigidBodyDef.linearDamping = this._linearDamping;\r\n        defRigidBodyDef.group = this.group;\r\n        var obj: any = this._linearVelocity;\r\n        defRigidBodyDef.type = this._type;\r\n        if (this._type == \"static\") {\r\n            defRigidBodyDef.angularVelocity = 0;\r\n            defRigidBodyDef.linearVelocity.setValue(0, 0);\r\n        } else {\r\n            defRigidBodyDef.angularVelocity = this._angularVelocity;\r\n            if (obj && obj.x != 0 || obj.y != 0) {\r\n                defRigidBodyDef.linearVelocity.setValue(obj.x, obj.y);\r\n            }\r\n        }\r\n\r\n        this._body = factory.rigidBodyDef_Create(defRigidBodyDef);\r\n        this._needrefeshShape();\r\n        this._updateBodyType()\r\n    }\r\n\r\n    /**\r\n     * @private \r\n     * 同步Body 类型\r\n     */\r\n    private _updateBodyType() {\r\n        if (!this._body) return;\r\n        Physics2D.I._factory.set_rigidBody_type(this.body, this._type)\r\n        if (this.type == \"static\") {\r\n            Physics2D.I.removeRigidBody(this)\r\n        } else {\r\n            Physics2D.I.addRigidBody(this)\r\n        }\r\n    }\r\n\r\n    /** @override */\r\n    protected _onAwake(): void {\r\n        (<Sprite>this.owner).cacheGlobal = true;\r\n        this._createBody();\r\n        this.owner.on(\"GlobaChange\", this, this._globalChangeHandler)\r\n    }\r\n\r\n    /** @private */\r\n    private _globalChangeHandler(flag: number) {\r\n        if (flag & RigidBody.changeFlag) this._needrefeshShape()\r\n    }\r\n\r\n    /** @override */\r\n    protected _onEnable(): void {\r\n        (<Sprite>this.owner).cacheGlobal = true;\r\n        this._createBody();\r\n        this.owner.on(\"GlobaChange\", this, this._globalChangeHandler)\r\n    }\r\n\r\n    /** @internal 通知需要跟新对象属性；下一帧执行*/\r\n    _needrefeshShape() {\r\n        Physics2D.I.updataRigidBodyAttribute(this);\r\n    }\r\n\r\n    /**\r\n     * @internal \r\n     * 同步节点坐标及旋转到物理世界,由系统调用\r\n     */\r\n    updatePhysicsAttribute(): void {\r\n        var factory = Physics2D.I._factory;\r\n        var sp: Sprite = (<Sprite>this.owner);\r\n        factory.set_RigibBody_Transform(this._body, sp.globalPosX, sp.globalPosY, Utils.toRadian((<Sprite>this.owner).globalRotation));\r\n        var comps: any[] = this.owner.getComponents(ColliderBase);\r\n        if (comps) {\r\n            for (var i: number = 0, n: number = comps.length; i < n; i++) {\r\n                var collider: ColliderBase = comps[i];\r\n                collider.rigidBody = this;\r\n                collider.refresh();\r\n            }\r\n            factory.retSet_rigidBody_MassData(this._body);\r\n            factory.set_rigidbody_Awake(this._body, true);\r\n            this.owner.event(\"shapeChange\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal \r\n     * 同步物理坐标到游戏坐标,由系统调用\r\n     */\r\n    updatePhysicsTransformToRender(): void {\r\n        if (this.type == \"static\") {\r\n            return;\r\n        }\r\n        var factory = Physics2D.I._factory;\r\n        if (Physics2D.I._factory.get_rigidBody_IsAwake(this._body)) {\r\n            var pos = Vector2.TempVector2;\r\n            factory.get_RigidBody_Position(this.body, pos);\r\n            var sp: Sprite = (<Sprite>this.owner);\r\n            sp.globalRotation = Utils.toAngle(factory.get_RigidBody_Angle(this.body));\r\n            sp.setGlobalPos(pos.x, pos.y);\r\n\r\n        }\r\n    }\r\n\r\n    /** @override */\r\n    protected _onDisable(): void {\r\n        Physics2D.I.removeRigidBody(this);\r\n        Physics2D.I.removeRigidBodyAttribute(this);\r\n        this.owner.off(\"GlobaChange\", this, this._globalChangeHandler);\r\n        (<Sprite>this.owner).cacheGlobal = false;\r\n        //添加到物理世界\r\n        this._body && Physics2D.I._factory.removeBody(this._body);\r\n        this._body = null;\r\n    }\r\n\r\n    /** @override */\r\n    protected _onDestroy(): void {\r\n        Physics2D.I.removeRigidBody(this);\r\n        Physics2D.I.removeRigidBodyAttribute(this);\r\n        this.owner.off(\"GlobaChange\", this, this._globalChangeHandler)\r\n        //添加到物理世界\r\n        this._body && Physics2D.I._factory.removeBody(this._body);\r\n        this._body = null;\r\n    }\r\n\r\n    /**获得原始body对象 */\r\n    getBody(): any {\r\n        if (!this._body) this._onAwake();\r\n        return this._body;\r\n    }\r\n\r\n    _getOriBody(): any {\r\n        return this._body;\r\n    }\r\n\r\n    /**[只读]获得原始body对象 */\r\n    get body(): any {\r\n        if (!this._body) this._onAwake();\r\n        return this._body;\r\n    }\r\n\r\n    /**\r\n     * 对刚体施加力\r\n     * @param\tposition 施加力的点，如{x:100,y:100}，全局坐标\r\n     * @param\tforce\t施加的力，如{x:0.1,y:0.1}\r\n     */\r\n    applyForce(position: IV2, force: IV2): void {\r\n        if (!this._body) this._onAwake();\r\n        Physics2D.I._factory.rigidBody_applyForce(this._body, force, position);\r\n    }\r\n\r\n    /**\r\n     * 从中心点对刚体施加力，防止对象旋转\r\n     * @param\tforce\t施加的力，如{x:0.1,y:0.1}\r\n     */\r\n    applyForceToCenter(force: IV2): void {\r\n        if (!this._body) this._onAwake();\r\n        Physics2D.I._factory.rigidBody_applyForceToCenter(this._body, force);\r\n    }\r\n\r\n    /**\r\n     * 施加速度冲量，添加的速度冲量会与刚体原有的速度叠加，产生新的速度\r\n     * @param\tposition 施加力的点，如{x:100,y:100}，全局坐标\r\n     * @param\timpulse\t施加的速度冲量，如{x:0.1,y:0.1}\r\n     */\r\n    applyLinearImpulse(position: IV2, impulse: IV2): void {\r\n        if (!this._body) this._onAwake();\r\n        Physics2D.I._factory.rigidbody_ApplyLinearImpulse(this._body, impulse, position);\r\n    }\r\n\r\n    /**\r\n     * 施加速度冲量，添加的速度冲量会与刚体原有的速度叠加，产生新的速度\r\n     * @param\timpulse\t施加的速度冲量，如{x:0.1,y:0.1}\r\n     */\r\n    applyLinearImpulseToCenter(impulse: IV2): void {\r\n        if (!this._body) this._onAwake();\r\n        Physics2D.I._factory.rigidbody_ApplyLinearImpulseToCenter(this._body, impulse);\r\n    }\r\n\r\n    /**\r\n     * 对刚体施加扭矩，使其旋转\r\n     * @param\ttorque\t施加的扭矩\r\n     */\r\n    applyTorque(torque: number): void {\r\n        if (!this._body) this._onAwake();\r\n        Physics2D.I._factory.rigidbody_applyTorque(this._body, torque);\r\n    }\r\n\r\n    /**\r\n     * 设置速度，比如{x:10,y:10}\r\n     * @param\tvelocity\r\n     */\r\n    setVelocity(velocity: IV2): void {\r\n        if (!this._body) this._onAwake();\r\n        Physics2D.I._factory.set_rigidBody_linearVelocity(this._body, velocity);\r\n    }\r\n\r\n    /**\r\n     * 设置角度\r\n     * @param\tvalue 单位为角度\r\n     */\r\n    setAngle(value: any): void {\r\n        if (!this._body) this._onAwake();\r\n        var factory = Physics2D.I._factory;\r\n        var sp: Sprite = (<Sprite>this.owner);\r\n        factory.set_RigibBody_Transform(this._body, sp.globalPosX, sp.globalPosY, value);\r\n        factory.set_rigidbody_Awake(this._body, true);\r\n    }\r\n\r\n    /**获得刚体质量*/\r\n    getMass(): number {\r\n        return this._body ? Physics2D.I._factory.get_rigidbody_Mass(this._body) : 0;\r\n    }\r\n\r\n    /**\r\n     * 获得质心的相对节点0,0点的位置偏移\r\n     */\r\n    getCenter(): any {\r\n        if (!this._body) this._onAwake();\r\n        var p: IV2 = Physics2D.I._factory.get_rigidBody_Center(this._body);\r\n        return p;\r\n    }\r\n\r\n    /**\r\n     * 获得质心的世界坐标，相对于Physics2D.I.worldRoot节点\r\n     */\r\n    getWorldCenter(): any {\r\n        if (!this._body) this._onAwake();\r\n        var p: IV2 = Physics2D.I._factory.get_rigidBody_WorldCenter(this._body);\r\n        return p;\r\n    }\r\n\r\n    /**\r\n     * 刚体类型，支持三种类型static，dynamic和kinematic类型\r\n     * static为静态类型，静止不动，不受重力影响，质量无限大，可以通过节点移动，旋转，缩放进行控制\r\n     * dynamic为动态类型，接受重力影响\r\n     * kinematic为运动类型，不受重力影响，可以通过施加速度或者力的方式使其运动\r\n     */\r\n    get type(): string {\r\n        return this._type;\r\n    }\r\n\r\n    set type(value: string) {\r\n        this._type = value;\r\n        this._updateBodyType()\r\n    }\r\n\r\n    /**重力缩放系数，设置为0为没有重力*/\r\n    get gravityScale(): number {\r\n        return this._gravityScale;\r\n    }\r\n\r\n    set gravityScale(value: number) {\r\n        this._gravityScale = value;\r\n        if (this._body) Physics2D.I._factory.set_rigidBody_gravityScale(this._body, value);\r\n    }\r\n\r\n    /**是否允许旋转，如果不希望刚体旋转，这设置为false*/\r\n    get allowRotation(): boolean {\r\n        return this._allowRotation;\r\n    }\r\n\r\n    set allowRotation(value: boolean) {\r\n        this._allowRotation = value;\r\n        if (this._body) Physics2D.I._factory.set_rigidBody_allowRotation(this._body, !value);\r\n    }\r\n\r\n    /**是否允许休眠，允许休眠能提高性能*/\r\n    get allowSleep(): boolean {\r\n        return this._allowSleep;\r\n    }\r\n\r\n    set allowSleep(value: boolean) {\r\n        this._allowSleep = value;\r\n        if (this._body) Physics2D.I._factory.set_rigidBody_allowSleep(this._body, value);\r\n    }\r\n\r\n    /**旋转速度阻尼系数，范围可以在0到无穷大之间，0表示没有阻尼，无穷大表示满阻尼，通常阻尼的值应该在0到0.1之间*/\r\n    get angularDamping(): number {\r\n        return this._angularDamping;\r\n    }\r\n\r\n    set angularDamping(value: number) {\r\n        this._angularDamping = value;\r\n        if (this._body) Physics2D.I._factory.set_rigidBody_angularDamping(this._body, value);\r\n    }\r\n\r\n    /**角速度，设置会导致旋转*/\r\n    get angularVelocity(): number {\r\n        if (this._body) return Physics2D.I._factory.get_rigidBody_angularVelocity(this._body);\r\n        return this._angularVelocity;\r\n    }\r\n\r\n    set angularVelocity(value: number) {\r\n        this._angularVelocity = value;\r\n        if (this._type == \"static\") {\r\n            return;\r\n        }\r\n        if (this._body) Physics2D.I._factory.set_rigidBody_angularVelocity(this.body, value);\r\n    }\r\n\r\n    /**线性速度阻尼系数，范围可以在0到无穷大之间，0表示没有阻尼，无穷大表示满阻尼，通常阻尼的值应该在0到0.1之间*/\r\n    get linearDamping(): number {\r\n        return this._linearDamping;\r\n    }\r\n\r\n    set linearDamping(value: number) {\r\n        this._linearDamping = value;\r\n        if (this._body) Physics2D.I._factory.set_rigidBody_linearDamping(this._body, value);\r\n    }\r\n\r\n    /**线性运动速度，比如{x:5,y:5}*/\r\n    get linearVelocity(): IV2 {\r\n        if (this._body) {\r\n            var vec: IV2 = Physics2D.I._factory.get_rigidBody_linearVelocity(this._body);\r\n            return { x: vec.x, y: vec.y };\r\n        }\r\n        return this._linearVelocity;\r\n    }\r\n\r\n    set linearVelocity(value: any) {\r\n        if (!value) return;\r\n        if (value instanceof Array) {\r\n            value = { x: value[0], y: value[1] };\r\n        }\r\n        this._linearVelocity = value;\r\n        if (this._type == \"static\") {\r\n            return;\r\n        }\r\n        if (this._body) Physics2D.I._factory.set_rigidBody_linearVelocity(this._body, value);\r\n    }\r\n\r\n    /**是否高速移动的物体，设置为true，可以防止高速穿透*/\r\n    get bullet(): boolean {\r\n        return this._bullet;\r\n    }\r\n\r\n    set bullet(value: boolean) {\r\n        this._bullet = value;\r\n        if (this._body) Physics2D.I._factory.set_rigidBody_bullet(this._body, value);\r\n    }\r\n\r\n    /** \r\n     * 获得相对body的世界坐标\r\n     * @param x (单位： 像素)\r\n     * @param y (单位： 像素)\r\n    */\r\n    getWorldPoint(x: number, y: number): Point {\r\n        return (<Sprite>this.owner)._getGlobalCacheLocalToGlobal(x, y);\r\n    }\r\n\r\n    /** \r\n     * 获得相对body的本地坐标\r\n     * @param x (单位： 像素)\r\n     * @param y (单位： 像素)\r\n    */\r\n    getLocalPoint(x: number, y: number): Point {\r\n        return (<Sprite>this.owner)._getGlobalCacheGlobalToLocal(x, y);\r\n    }\r\n\r\n}","import { Component } from \"../../components/Component\";\r\nimport { FixtureBox2DDef, PhysicsShape } from \"./ColliderStructInfo\";\r\nimport { Physics2D } from \"../Physics2D\";\r\nimport { RigidBody } from \"../RigidBody\";\r\nimport { Sprite } from \"../../display/Sprite\";\r\n\r\n\r\n/**\r\n * 碰撞体基类\r\n */\r\nexport class ColliderBase extends Component {\r\n\r\n    /**FixtureBox2DDef 数据 */\r\n    private static TempDef: FixtureBox2DDef = new FixtureBox2DDef()\r\n    /**是否是传感器，传感器能够触发碰撞事件，但不会产生碰撞反应*/\r\n    private _isSensor: boolean = false;\r\n    /**密度值，值可以为零或者是正数，建议使用相似的密度，这样做可以改善堆叠稳定性，默认值为10*/\r\n    private _density: number = 10;\r\n    /**摩擦力，取值范围0-1，值越大，摩擦越大，默认值为0.2*/\r\n    private _friction: number = 0.2;\r\n    /**弹性系数，取值范围0-1，值越大，弹性越大，默认值为0*/\r\n    private _restitution: number = 0;\r\n    /**标签*/\r\n    label: string;\r\n    /**@private box2D fixture Def */\r\n    protected _fixtureDef: any;\r\n    /**@readonly[只读]b2Fixture对象 */\r\n    fixture: any;\r\n    /**刚体引用*/\r\n    rigidBody: RigidBody;\r\n    /**@internal shape类型标记*/\r\n    protected _physicShape: PhysicsShape;\r\n\r\n    /**相对节点的x轴偏移*/\r\n    private _x: number = 0;\r\n    /**相对节点的y轴偏移*/\r\n    private _y: number = 0;\r\n\r\n    /**相对节点的x轴偏移*/\r\n    get x(): number {\r\n        return this._x;\r\n    }\r\n\r\n    set x(value: number) {\r\n        if (this._x == value) return;\r\n        this._x = value;\r\n        this._needupdataShapeAttribute();\r\n    }\r\n\r\n    /**相对节点的y轴偏移*/\r\n    get y(): number {\r\n        return this._y;\r\n    }\r\n\r\n    set y(value: number) {\r\n        if (this._y == value) return;\r\n        this._y = value;\r\n        this._needupdataShapeAttribute();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * 获得节点的全局缩放X\r\n     */\r\n    protected get scaleX(): number {\r\n        return (<Sprite>this.owner).globalScaleX;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * 获得节点的全局缩放Y\r\n     */\r\n    protected get scaleY(): number {\r\n        return (<Sprite>this.owner).globalScaleY;\r\n    }\r\n\r\n\r\n    /**\r\n     * 创建一个新的 <code>ColliderBase</code> 实例。\r\n     */\r\n    constructor() {\r\n        super();\r\n        this._singleton = false;\r\n    }\r\n\r\n    /**@internal 设置shape数据 */\r\n    protected _setShapeData(shape: any): void {\r\n        throw (\"ColliderBase: must override it.\");\r\n    }\r\n\r\n    /**@internal 创建获得相对于描点x的偏移 */\r\n    protected get pivotoffx(): number {\r\n        return this._x - (<Sprite>this.owner).pivotX;\r\n    }\r\n\r\n    /**@internal 创建获得相对于描点y的偏移 */\r\n    protected get pivotoffy(): number {\r\n        return this._y - (<Sprite>this.owner).pivotY;\r\n    }\r\n\r\n    /**@private 创建Shape*/\r\n    protected createfixture(): any {\r\n        let factory = Physics2D.I._factory;\r\n        var body: any = this.rigidBody.body;\r\n        var def: any = ColliderBase.TempDef;\r\n        def.density = this.density;\r\n        def.friction = this.friction;\r\n        def.isSensor = this.isSensor;\r\n        def.restitution = this.restitution;\r\n        def.shape = this._physicShape;\r\n        let fixtureDef = factory.createFixtureDef(def);\r\n        this._setShapeData(fixtureDef._shape);\r\n        this.fixture = factory.createfixture(body, fixtureDef);\r\n    }\r\n\r\n    /**@private 设置shape属性*/\r\n    protected resetFixtureData() {\r\n        var def: any = ColliderBase.TempDef;\r\n        def.density = this.density;\r\n        def.friction = this.friction;\r\n        def.isSensor = this.isSensor;\r\n        def.restitution = this.restitution;\r\n        Physics2D.I._factory.resetFixtureData(this.fixture, def);\r\n        this._setShapeData(this.fixture.shape);\r\n    }\r\n\r\n    protected _onEnable(): void {\r\n        if (this.owner.getComponent(RigidBody)) {\r\n            this.rigidBody = this.owner.getComponent(RigidBody)\r\n            this._needupdataShapeAttribute();\r\n        }\r\n    }\r\n\r\n    protected _onAwake(): void {\r\n        if (this.owner.getComponent(RigidBody)) {\r\n            this.rigidBody = this.owner.getComponent(RigidBody)\r\n            this._needupdataShapeAttribute();\r\n        }\r\n    }\r\n\r\n    /**通知rigidBody 更新shape 属性值 */\r\n    protected _needupdataShapeAttribute(): void {\r\n        if (!this.rigidBody) {\r\n            return;\r\n        }\r\n        this.rigidBody._needrefeshShape();\r\n    }\r\n\r\n\r\n    /**是否是传感器，传感器能够触发碰撞事件，但不会产生碰撞反应*/\r\n    get isSensor(): boolean {\r\n        return this._isSensor;\r\n    }\r\n\r\n    set isSensor(value: boolean) {\r\n        if (this._isSensor == value) return;\r\n        this._isSensor = value;\r\n        this._needupdataShapeAttribute();\r\n    }\r\n\r\n    /**密度值，值可以为零或者是正数，建议使用相似的密度，这样做可以改善堆叠稳定性，默认值为10*/\r\n    get density(): number {\r\n        return this._density;\r\n    }\r\n\r\n    set density(value: number) {\r\n        if (this._density == value) return;\r\n        this._density = value;\r\n        this._needupdataShapeAttribute();\r\n    }\r\n\r\n    /**摩擦力，取值范围0-1，值越大，摩擦越大，默认值为0.2*/\r\n    get friction(): number {\r\n        return this._friction;\r\n    }\r\n\r\n    set friction(value: number) {\r\n        if (this._friction == value) return;\r\n        this._friction = value;\r\n        this._needupdataShapeAttribute();\r\n    }\r\n\r\n    /**弹性系数，取值范围0-1，值越大，弹性越大，默认值为0*/\r\n    get restitution(): number {\r\n        return this._restitution;\r\n    }\r\n\r\n    set restitution(value: number) {\r\n        if (this._restitution == value) return;\r\n        this._restitution = value;\r\n        this._needupdataShapeAttribute();\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * 碰撞体参数发生变化后，刷新物理世界碰撞信息\r\n     */\r\n    refresh(): void {\r\n        if (!this.enabled) {\r\n            return;\r\n        }\r\n        let factory = Physics2D.I._factory;\r\n        if (!this.fixture) this.createfixture();\r\n        else this.resetFixtureData();\r\n        factory.set_fixtureDef_GroupIndex(this.fixture, this.rigidBody.group);\r\n        factory.set_fixtureDef_CategoryBits(this.fixture, this.rigidBody.category);\r\n        factory.set_fixtureDef_maskBits(this.fixture, this.rigidBody.mask);\r\n        factory.set_fixture_collider(this.fixture, this);\r\n    }\r\n\r\n    protected _onDisable(): void {\r\n        let factory = Physics2D.I._factory;\r\n        if (this.fixture && this.rigidBody._getOriBody()) {\r\n            factory.rigidBody_DestroyFixture(this.rigidBody.body, this.fixture);\r\n        }\r\n        this.fixture = null;\r\n        this.rigidBody = null;\r\n    }\r\n}\r\n","import { ColliderBase } from \"./ColliderBase\";\r\nimport { Physics2D } from \"../Physics2D\";\r\nimport { PhysicsShape } from \"./ColliderStructInfo\";\r\n\r\n\r\n/**\r\n * 2D矩形碰撞体\r\n */\r\nexport class BoxCollider extends ColliderBase {\r\n\r\n    /**矩形宽度*/\r\n    private _width: number = 100;\r\n    /**矩形高度*/\r\n    private _height: number = 100;\r\n\r\n    /**\r\n    * 创建一个新的 <code>BoxCollider</code> 实例。\r\n    */\r\n    constructor() {\r\n        super();\r\n        this._physicShape = PhysicsShape.BoxShape;\r\n    }\r\n\r\n    /**@override */\r\n    protected _setShapeData(shape: any): void {\r\n        let helfW: number = this._width * 0.5;\r\n        let helfH: number = this._height * 0.5;\r\n        var center = {\r\n            x: helfW + this.pivotoffx,\r\n            y: helfH + this.pivotoffy\r\n        }\r\n        Physics2D.I._factory.set_collider_SetAsBox(shape, helfW, helfH, center, Math.abs(this.scaleX), Math.abs(this.scaleY));\r\n    }\r\n\r\n    /**矩形宽度*/\r\n    get width(): number {\r\n        return this._width;\r\n    }\r\n\r\n    set width(value: number) {\r\n        if (value <= 0) throw \"BoxCollider size cannot be less than 0\";\r\n        if (this._width == value) return;\r\n        this._width = value;\r\n        this._needupdataShapeAttribute();\r\n    }\r\n\r\n    /**矩形高度*/\r\n    get height(): number {\r\n        return this._height;\r\n    }\r\n\r\n    set height(value: number) {\r\n        if (value <= 0) throw \"BoxCollider size cannot be less than 0\";\r\n        if (this._height == value) return;\r\n        this._height = value;\r\n        this._needupdataShapeAttribute();\r\n    }\r\n\r\n}\r\n","import { ColliderBase } from \"./ColliderBase\";\r\nimport { Physics2D } from \"../Physics2D\";\r\nimport { PhysicsShape } from \"./ColliderStructInfo\";\r\nimport { Sprite } from \"../../display/Sprite\";\r\n\r\n/**\r\n * 2D线形碰撞体\r\n */\r\nexport class ChainCollider extends ColliderBase {\r\n\r\n    /**\r\n     * @deprecated\r\n     * 用逗号隔开的点的集合，格式：x,y,x,y ...\r\n     */\r\n    private _points: string = \"0,0,100,0\";\r\n\r\n    /**顶点数据*/\r\n    private _datas: number[] = [];\r\n\r\n    /**是否是闭环，注意不要有自相交的链接形状，它可能不能正常工作*/\r\n    private _loop: boolean = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this._physicShape = PhysicsShape.ChainShape;\r\n    }\r\n\r\n    /**\r\n    * @override\r\n    */\r\n    protected _setShapeData(shape: any): void {\r\n        var len: number = this._datas.length;\r\n        if (len % 2 == 1) throw \"ChainCollider datas lenth must a multiplier of 2\";\r\n        Physics2D.I._factory.set_ChainShape_data(shape, this.pivotoffx, this.pivotoffy, this._datas, this._loop, this.scaleX, this.scaleY);\r\n    }\r\n\r\n    /**\r\n     * @deprecated\r\n     * 用逗号隔开的点的集合，格式：x,y,x,y ...\r\n     */\r\n    get points(): string {\r\n        return this._points;\r\n    }\r\n    onAdded() {\r\n        super.onAdded();\r\n        if(this._datas.length == 0){\r\n            let sp = this.owner as Sprite;\r\n            this._datas.push(0, 0, sp.width, 0, 0, sp.height, sp.width, sp.height);\r\n        }\r\n       \r\n    }\r\n\r\n    set points(value: string) {\r\n        if (!value) throw \"ChainCollider points cannot be empty\";\r\n        this._points = value;\r\n        var arr: any[] = this._points.split(\",\");\r\n        let length = arr.length;\r\n        this._datas = [];\r\n        for (var i: number = 0, n: number = length; i < n; i++) {\r\n            this._datas.push(parseInt(arr[i]));\r\n        }\r\n        this._needupdataShapeAttribute();\r\n    }\r\n\r\n    /**顶点数据 x,y,x,y ...*/\r\n    get datas(): number[] {\r\n        return this._datas;\r\n    }\r\n\r\n    set datas(value: number[]) {\r\n        if (!value) throw \"ChainCollider datas cannot be empty\";\r\n        this._datas = value;\r\n        this._needupdataShapeAttribute();\r\n    }\r\n\r\n    /**是否是闭环，注意不要有自相交的链接形状，它可能不能正常工作*/\r\n    get loop(): boolean {\r\n        return this._loop;\r\n    }\r\n\r\n    set loop(value: boolean) {\r\n        if (this._loop == value) return;\r\n        this._loop = value;\r\n        this._needupdataShapeAttribute();\r\n    }\r\n}","import { ColliderBase } from \"./ColliderBase\";\r\nimport { Physics2D } from \"../Physics2D\";\r\nimport { PhysicsShape } from \"./ColliderStructInfo\";\r\n\r\n/**\r\n * 2D圆形碰撞体\r\n */\r\nexport class CircleCollider extends ColliderBase {\r\n\r\n    /**圆形半径，必须为正数*/\r\n    private _radius: number = 50;\r\n\r\n    constructor() {\r\n        super();\r\n        this._physicShape = PhysicsShape.CircleShape;\r\n    }\r\n\r\n    /**\r\n    * @override\r\n    */\r\n    protected _setShapeData(shape: any): void {\r\n        var scale: number = Math.max(Math.abs(this.scaleX), Math.abs(this.scaleY));\r\n        let radius = this.radius;\r\n        Physics2D.I._factory.set_CircleShape_radius(shape, radius, scale);\r\n        Physics2D.I._factory.set_CircleShape_pos(shape, this.x, this.y, scale);\r\n    }\r\n\r\n    /**圆形半径，必须为正数*/\r\n    get radius(): number {\r\n        return this._radius;\r\n    }\r\n\r\n    set radius(value: number) {\r\n        if (value <= 0) throw \"CircleCollider radius cannot be less than 0\";\r\n        if (this._radius == value) return;\r\n        this._radius = value;\r\n        this._needupdataShapeAttribute();\r\n    }\r\n\r\n\r\n}","import { ColliderBase } from \"./ColliderBase\";\r\nimport { Physics2D } from \"../Physics2D\";\r\nimport { PhysicsShape } from \"./ColliderStructInfo\";\r\n\r\n/**\r\n * 2D边框碰撞体\r\n */\r\nexport class EdgeCollider extends ColliderBase {\r\n    /**\r\n     * @deprecated\r\n     * 用逗号隔开的点的集合，注意只有两个点，格式：x,y,x,y\r\n     */\r\n    private _points: string = \"0,0,100,0\";\r\n\r\n    /**顶点数据*/\r\n    private _datas: number[] = [0, 0, 100, 0];\r\n\r\n    constructor() {\r\n        super();\r\n        this._physicShape = PhysicsShape.EdgeShape;\r\n    }\r\n\r\n    /**\r\n     * @override\r\n     */\r\n    protected _setShapeData(shape: any): void {\r\n        var len: number = this._datas.length;\r\n        if (len % 2 == 1) throw \"EdgeCollider points lenth must a multiplier of 2\";\r\n        Physics2D.I._factory.set_EdgeShape_data(shape, this.pivotoffx, this.pivotoffy, this._datas, this.scaleX, this.scaleY);\r\n    }\r\n\r\n    /**\r\n     * @deprecated\r\n     * 用逗号隔开的点的集合，注意只有两个点，格式：x,y,x,y*/\r\n    get points(): string {\r\n        return this._points;\r\n    }\r\n\r\n    set points(value: string) {\r\n        if (!value) throw \"EdgeCollider points cannot be empty\";\r\n        this._points = value;\r\n        var arr: any[] = this._points.split(\",\");\r\n        let length = arr.length;\r\n        this._datas = [];\r\n        for (var i: number = 0, n: number = length; i < n; i++) {\r\n            this._datas.push(parseInt(arr[i]));\r\n        }\r\n        this._needupdataShapeAttribute();\r\n    }\r\n\r\n    /**顶点数据 x,y,x,y ...*/\r\n    get datas(): number[] {\r\n        return this._datas;\r\n    }\r\n\r\n    set datas(value: number[]) {\r\n        if (!value) throw \"EdgeCollider points cannot be empty\";\r\n        this._datas = value;\r\n        this._needupdataShapeAttribute();\r\n    }\r\n}","import { ColliderBase } from \"./ColliderBase\";\r\nimport { Physics2D } from \"../Physics2D\";\r\nimport { PhysicsShape } from \"./ColliderStructInfo\";\r\nimport { Sprite } from \"../../display/Sprite\";\r\n\r\n/**\r\n * 2D多边形碰撞体，暂时不支持凹多边形，如果是凹多边形，先手动拆分为多个凸多边形\r\n * 节点个数最多是b2_maxPolygonVertices，这数值默认是8，所以点的数量不建议超过8个，也不能小于3个\r\n */\r\nexport class PolygonCollider extends ColliderBase {\r\n\r\n    /**\r\n     * @deprecated\r\n     * 用逗号隔开的点的集合，格式：x,y,x,y ...\r\n     */\r\n    private _points: string = \"50,0,100,100,0,100\";\r\n\r\n    /**顶点数据*/\r\n    private _datas: number[] = [];\r\n\r\n    constructor() {\r\n        super();\r\n        this._physicShape = PhysicsShape.PolygonShape;\r\n    }\r\n    onAdded() {\r\n        super.onAdded();\r\n        let sp = this.owner as Sprite;\r\n        this._datas.push(0, 0, sp.width, sp.height * 0.5, 0, sp.height);\r\n    }\r\n\r\n    /**\r\n    * @override\r\n    */\r\n    protected _setShapeData(shape: any): void {\r\n        var len: number = this.datas.length;\r\n        if (len < 6) throw \"PolygonCollider points must be greater than 3\";\r\n        if (len % 2 == 1) throw \"PolygonCollider points lenth must a multiplier of 2\";\r\n        Physics2D.I._factory.set_PolygonShape_data(shape, this.pivotoffx, this.pivotoffy, this.datas, this.scaleX, this.scaleY);\r\n    }\r\n\r\n    /**\r\n     * @deprecated\r\n     * 用逗号隔开的点的集合，格式：x,y,x,y ...\r\n     */\r\n    get points(): string {\r\n        return this._points;\r\n    }\r\n\r\n    set points(value: string) {\r\n        if (!value) throw \"PolygonCollider points cannot be empty\";\r\n        this._points = value;\r\n        var arr: any[] = this._points.split(\",\");\r\n        let length = arr.length;\r\n        this._datas = [];\r\n        for (var i: number = 0, n: number = length; i < n; i++) {\r\n            this._datas.push(parseInt(arr[i]))\r\n        }\r\n        this._needupdataShapeAttribute();\r\n    }\r\n\r\n    /**顶点数据 x,y,x,y ...*/\r\n    get datas(): number[] {\r\n        return this._datas;\r\n    }\r\n\r\n    set datas(value: number[]) {\r\n        if (!value) throw \"PolygonCollider points cannot be empty\";\r\n        this._datas = value;\r\n        this._needupdataShapeAttribute();\r\n    }\r\n}","import { Component } from \"../../components/Component\"\r\nimport { Sprite } from \"../../display/Sprite\";\r\nimport { Point } from \"../../maths/Point\";\r\nimport { IPhysiscs2DFactory } from \"../IPhysiscs2DFactory\";\r\nimport { Physics2D } from \"../Physics2D\"\r\nimport { RigidBody } from \"../RigidBody\";\r\n\r\n/**\r\n * 关节基类\r\n */\r\nexport class JointBase extends Component {\r\n    /**原生关节对象*/\r\n    protected _joint: any;\r\n\r\n    protected _factory: IPhysiscs2DFactory;\r\n    constructor() {\r\n        super();\r\n        this._factory = Physics2D.I._factory;\r\n        this._singleton = false;\r\n    }\r\n\r\n    protected getBodyAnchor(body: RigidBody, anchorx: number, anchory: number): Point {\r\n        Point.TEMP.setTo(anchorx, anchory)\r\n        let node = <Sprite>body.owner;\r\n        if (node) {\r\n            if (node.transform) {\r\n                node.transform.transformPointN(Point.TEMP)\r\n            } else {\r\n                Point.TEMP.x *= node.scaleX;\r\n                Point.TEMP.y *= node.scaleY;\r\n            }\r\n        }\r\n        return Point.TEMP;\r\n    }\r\n\r\n    /**[只读]原生关节对象*/\r\n    get joint(): any {\r\n        if (!this._joint) this._createJoint();\r\n        return this._joint;\r\n    }\r\n\r\n    protected _onEnable(): void {\r\n        this._createJoint();\r\n    }\r\n\r\n    protected _onAwake(): void {\r\n        this._createJoint();\r\n    }\r\n\r\n    protected _createJoint(): void {\r\n    }\r\n\r\n    protected _onDisable(): void {\r\n        if (this._joint && this._factory.getJoint_userData(this._joint) && !this._factory.getJoint_userData_destroy(this._joint)) {\r\n            Physics2D.I._factory.removeJoint(this._joint);\r\n        }\r\n        this._joint = null;\r\n    }\r\n}\r\n","import { Vector2 } from \"../../maths/Vector2\";\r\n\r\n/**\r\n * Box2D distance Joint def Struct\r\n */\r\nexport class physics2D_DistancJointDef {\r\n    bodyA: any;\r\n    bodyB: any;\r\n    localAnchorA: Vector2 = new Vector2();\r\n    localAnchorB: Vector2 = new Vector2();\r\n    frequency: number;\r\n    dampingRatio: number;\r\n    collideConnected: boolean;\r\n    length: number;\r\n    maxLength: number;\r\n    minLength: number;\r\n    isLocalAnchor: boolean\r\n}\r\n\r\nexport class physics2D_GearJointDef {\r\n    bodyA: any;\r\n    bodyB: any;\r\n    joint1: any;\r\n    joint2: any;\r\n    ratio: number;\r\n    collideConnected: boolean;\r\n}\r\n\r\n\r\nexport class physics2D_MotorJointDef {\r\n    bodyA: any;\r\n    bodyB: any;\r\n    linearOffset: Vector2 = new Vector2();\r\n    angularOffset: number;\r\n    maxForce: number;\r\n    maxTorque: number;\r\n    correctionFactor: number;\r\n    collideConnected: boolean;\r\n}\r\n\r\nexport class physics2D_MouseJointJointDef {\r\n    bodyA: any;\r\n    bodyB: any;\r\n    maxForce: number;\r\n    frequency: number;\r\n    dampingRatio: number;\r\n    target: Vector2 = new Vector2();\r\n}\r\n\r\nexport class physics2D_PrismaticJointDef {\r\n    bodyA: any;\r\n    bodyB: any;\r\n    anchor: Vector2 = new Vector2();\r\n    axis: Vector2 = new Vector2();\r\n    enableMotor: boolean;\r\n    motorSpeed: number;\r\n    maxMotorForce: number;\r\n    enableLimit: boolean;\r\n    lowerTranslation: number;\r\n    upperTranslation: number;\r\n    collideConnected: boolean;\r\n}\r\n\r\nexport class physics2D_PulleyJointDef {\r\n    bodyA: any;\r\n    bodyB: any;\r\n    groundAnchorA: Vector2 = new Vector2();\r\n    groundAnchorB: Vector2 = new Vector2();\r\n    localAnchorA: Vector2 = new Vector2();\r\n    localAnchorB: Vector2 = new Vector2();\r\n    ratio: number;\r\n    collideConnected: boolean;\r\n}\r\n\r\nexport class physics2D_RevoluteJointDef {\r\n    bodyA: any;\r\n    bodyB: any;\r\n    anchor: Vector2 = new Vector2();\r\n    enableMotor: boolean;\r\n    motorSpeed: number;\r\n    maxMotorTorque: number;\r\n    enableLimit: boolean;\r\n    lowerAngle: number;\r\n    upperAngle: number;\r\n    collideConnected: boolean;\r\n}\r\n\r\nexport class physics2D_WeldJointDef {\r\n    bodyA: any;\r\n    bodyB: any;\r\n    anchor: Vector2 = new Vector2();\r\n    frequency: number;\r\n    dampingRatio: number;\r\n    collideConnected: boolean;\r\n}\r\n\r\nexport class physics2D_WheelJointDef {\r\n    bodyA: any;\r\n    bodyB: any;\r\n    anchor: Vector2 = new Vector2();\r\n    axis: Vector2 = new Vector2();\r\n    enableMotor: boolean;\r\n    motorSpeed: number;\r\n    maxMotorTorque: number;\r\n    enableLimit: boolean;\r\n    lowerTranslation: number;\r\n    upperTranslation: number;\r\n    frequency: number;\r\n    dampingRatio: number;\r\n    collideConnected: boolean;\r\n}\r\n\r\n","import { JointBase } from \"./JointBase\";\r\nimport { Physics2D } from \"../Physics2D\"\r\nimport { RigidBody } from \"../RigidBody\"\r\nimport { physics2D_DistancJointDef } from \"./JointDefStructInfo\";\r\nimport { Sprite } from \"../../display/Sprite\";\r\n\r\n/**\r\n * 距离关节：两个物体上面各自有一点，两点之间的距离固定不变\r\n */\r\nexport class DistanceJoint extends JointBase {\r\n    /**@private */\r\n    private static _temp: physics2D_DistancJointDef;\r\n    /**[首次设置有效]关节的自身刚体*/\r\n    selfBody: RigidBody;\r\n    /**[首次设置有效]关节的连接刚体，可不设置，默认为左上角空刚体*/\r\n    otherBody: RigidBody;\r\n    /**[首次设置有效]自身刚体链接点，是相对于自身刚体的左上角位置偏移*/\r\n    selfAnchor: any[] = [0, 0];\r\n    /**[首次设置有效]链接刚体链接点，是相对于otherBody的左上角位置偏移*/\r\n    otherAnchor: any[] = [0, 0];\r\n    /**[首次设置有效]两个刚体是否可以发生碰撞，默认为false*/\r\n    collideConnected: boolean = false;\r\n\r\n    /**约束的目标静止长度*/\r\n    private _length: number = 0;\r\n    /**约束的最小长度，-1表示使用默认值*/\r\n    private _maxLength: number = -1;\r\n    /**约束的最大长度，-1表示使用默认值*/\r\n    private _minLength: number = -1;\r\n\r\n    /**弹簧系统的震动频率，可以视为弹簧的弹性系数，通常频率应该小于时间步长频率的一半*/\r\n    private _frequency: number = 1;\r\n    /**刚体在回归到节点过程中受到的阻尼比，建议取值0~1*/\r\n    private _dampingRatio: number = 0;\r\n\r\n    /**\r\n     * @override\r\n     */\r\n    protected _createJoint(): void {\r\n        if (!this._joint) {\r\n            let node = <Sprite>this.owner;\r\n            this.selfBody = this.selfBody || node.getComponent(RigidBody);\r\n            if (!this.selfBody) throw \"selfBody can not be empty\";\r\n            let point = this.getBodyAnchor(this.selfBody, this.selfAnchor[0], this.selfAnchor[1]);\r\n            var def = DistanceJoint._temp || (DistanceJoint._temp = new physics2D_DistancJointDef());\r\n            def.bodyB = this.selfBody.getBody();\r\n            def.localAnchorB.setValue(point.x, point.y);\r\n            this.selfBody.owner.on(\"shapeChange\", this, this._refeahJoint);\r\n            if (this.otherBody) {\r\n                def.bodyA = this.otherBody.getBody();\r\n                point = this.getBodyAnchor(this.otherBody, this.otherAnchor[0], this.otherAnchor[1]);\r\n                def.localAnchorA.setValue(point.x, point.y);\r\n                this.otherBody.owner.on(\"shapeChange\", this, this._refeahJoint);\r\n            } else {\r\n                def.bodyA = Physics2D.I._emptyBody;\r\n                def.localAnchorA.setValue(this.otherAnchor[0], this.otherAnchor[1]);\r\n            }\r\n\r\n            def.dampingRatio = this._dampingRatio;\r\n            def.frequency = this._frequency;\r\n            def.collideConnected = this.collideConnected;\r\n            def.length = this._length;\r\n            def.maxLength = this._maxLength;\r\n            def.minLength = this._minLength;\r\n            this._joint = this._factory.createDistanceJoint(def);\r\n\r\n        }\r\n    }\r\n\r\n    /**@internal */\r\n    _refeahJoint(): void {\r\n        if (this._joint) {\r\n            this._factory.set_DistanceJointStiffnessDamping(this._joint, this._frequency, this._dampingRatio);\r\n        }\r\n    }\r\n\r\n    onDestroy(): void {\r\n        super.onDestroy();\r\n        this.selfBody.owner.off(\"shapeChange\", this._refeahJoint);\r\n        if (this.otherBody) this.otherBody.owner.off(\"shapeChange\", this._refeahJoint);\r\n    }\r\n\r\n    /**约束的目标静止长度*/\r\n    get length(): number {\r\n        return this._length;\r\n    }\r\n\r\n    set length(value: number) {\r\n        this._length = value;\r\n        if (this._joint) this._factory.set_DistanceJoint_length(this._joint, value);\r\n    }\r\n\r\n    /**约束的最小长度*/\r\n    get minLength(): number {\r\n        return this._minLength;\r\n    }\r\n\r\n    set minLength(value: number) {\r\n        this._minLength = value;\r\n        if (this._joint) this._factory.set_DistanceJoint_MinLength(this._joint, value);\r\n    }\r\n\r\n    /**约束的最大长度*/\r\n    get maxLength(): number {\r\n        return this._maxLength;\r\n    }\r\n\r\n    set maxLength(value: number) {\r\n        this._maxLength = value;\r\n        if (this._joint) this._factory.set_DistanceJoint_MaxLength(this._joint, value);\r\n    }\r\n\r\n    /**弹簧系统的震动频率，可以视为弹簧的弹性系数，通常频率应该小于时间步长频率的一半*/\r\n    get frequency(): number {\r\n        return this._frequency;\r\n    }\r\n\r\n    set frequency(value: number) {\r\n        this._frequency = value;\r\n        if (this._joint) {\r\n            this._factory.set_DistanceJointStiffnessDamping(this._joint, this._frequency, this._dampingRatio);\r\n        }\r\n    }\r\n\r\n    /**刚体在回归到节点过程中受到的阻尼比，建议取值0~1*/\r\n    get damping(): number {\r\n        return this._dampingRatio;\r\n    }\r\n\r\n    set damping(value: number) {\r\n        this._dampingRatio = value;\r\n        if (this._joint) {\r\n            this._factory.set_DistanceJointStiffnessDamping(this._joint, this._frequency, this._dampingRatio);\r\n        }\r\n    }\r\n\r\n    /**刚体当前长度*/\r\n    get jointLength(): number {\r\n        if (this._joint) {\r\n            return this._factory.phyToLayaValue(this.joint.GetLength())\r\n        } else {\r\n            return 0;\r\n        }\r\n\r\n    }\r\n}\r\n","import { JointBase } from \"./JointBase\";\r\nimport { RigidBody } from \"../RigidBody\"\r\nimport { RevoluteJoint } from \"./RevoluteJoint\";\r\nimport { PrismaticJoint } from \"./PrismaticJoint\";\r\nimport { physics2D_GearJointDef } from \"./JointDefStructInfo\";\r\n\r\n/**\r\n * 齿轮关节：用来模拟两个齿轮间的约束关系，齿轮旋转时，产生的动量有两种输出方式，一种是齿轮本身的角速度，另一种是齿轮表面的线速度\r\n */\r\nexport class GearJoint extends JointBase {\r\n    /**@private */\r\n    private static _temp: physics2D_GearJointDef;\r\n    /**[首次设置有效]要绑定的第1个关节，类型可以是RevoluteJoint或者PrismaticJoint*/\r\n    joint1: RevoluteJoint | PrismaticJoint;\r\n    /**[首次设置有效]要绑定的第2个关节，类型可以是RevoluteJoint或者PrismaticJoint*/\r\n    joint2: RevoluteJoint | PrismaticJoint;\r\n    /**[首次设置有效]两个刚体是否可以发生碰撞，默认为false*/\r\n    collideConnected: boolean = false;\r\n\r\n    /**两个齿轮角速度比例，默认1*/\r\n    private _ratio: number = 1;\r\n    /**\r\n     * @override\r\n     * \r\n     */\r\n    protected _createJoint(): void {\r\n        if (!this._joint) {\r\n            if (!this.joint1) throw \"Joint1 can not be empty\";\r\n            if (!this.joint2) throw \"Joint2 can not be empty\";\r\n\r\n            var def: physics2D_GearJointDef = GearJoint._temp || (GearJoint._temp = new physics2D_GearJointDef());\r\n            def.bodyA = this.joint1.owner.getComponent(RigidBody).getBody();\r\n            def.bodyB = this.joint2.owner.getComponent(RigidBody).getBody();\r\n            def.joint1 = this.joint1.joint;\r\n            def.joint2 = this.joint2.joint;\r\n            def.ratio = -this._ratio;\r\n            def.collideConnected = this.collideConnected;\r\n            this._joint = this._factory.create_GearJoint(def);\r\n        }\r\n    }\r\n\r\n    /**两个齿轮角速度比例，默认1*/\r\n    get ratio(): number {\r\n        return this._ratio;\r\n    }\r\n\r\n    set ratio(value: number) {\r\n        this._ratio = value;\r\n        if (this._joint) this._factory.set_GearJoint_SetRatio(this._joint, value);\r\n    }\r\n}","import { JointBase } from \"./JointBase\";\r\nimport { RigidBody } from \"../RigidBody\"\r\nimport { physics2D_MotorJointDef } from \"./JointDefStructInfo\";\r\nimport { Utils } from \"../../utils/Utils\";\r\n\r\n/**\r\n * 马达关节：用来限制两个刚体，使其相对位置和角度保持不变\r\n */\r\nexport class MotorJoint extends JointBase {\r\n    /**@private */\r\n    private static _temp: physics2D_MotorJointDef;\r\n    /**[首次设置有效]关节的自身刚体*/\r\n    selfBody: RigidBody;\r\n    /**[首次设置有效]关节的连接刚体*/\r\n    otherBody: RigidBody;\r\n    /**[首次设置有效]两个刚体是否可以发生碰撞，默认为false*/\r\n    collideConnected: boolean = false;\r\n\r\n    /**基于otherBody坐标位置的偏移量，也是selfBody的目标位置*/\r\n    private _linearOffset: any[] = [0, 0];\r\n    /**基于otherBody的角度偏移量，也是selfBody的目标角度*/\r\n    private _angularOffset: number = 0;\r\n    /**当selfBody偏离目标位置时，为使其恢复到目标位置，马达关节所施加的最大作用力*/\r\n    private _maxForce: number = 1000;\r\n    /**当selfBody角度与目标角度不同时，为使其达到目标角度，马达关节施加的最大扭力*/\r\n    private _maxTorque: number = 1000;\r\n    /**selfBody向目标位置移动时的缓动因子，取值0~1，值越大速度越快*/\r\n    private _correctionFactor: number = 0.3;\r\n    /**\r\n     * @override\r\n     * \r\n     */\r\n    protected _createJoint(): void {\r\n        if (!this._joint) {\r\n            if (!this.otherBody) throw \"otherBody can not be empty\";\r\n            this.selfBody = this.selfBody || this.owner.getComponent(RigidBody);\r\n            if (!this.selfBody) throw \"selfBody can not be empty\";\r\n\r\n            var def: physics2D_MotorJointDef = MotorJoint._temp || (MotorJoint._temp = new physics2D_MotorJointDef());\r\n            def.bodyA = this.selfBody.getBody();\r\n            def.bodyB = this.otherBody.getBody();\r\n            def.linearOffset.setValue(this._linearOffset[0], this._linearOffset[1]);\r\n            def.angularOffset = Utils.toRadian(-this._angularOffset);\r\n            def.maxForce = this._maxForce;\r\n            def.maxTorque = this._maxTorque;\r\n            def.correctionFactor = this._correctionFactor;\r\n            def.collideConnected = this.collideConnected;\r\n            this._joint = this._factory.create_MotorJoint(def);\r\n        }\r\n    }\r\n\r\n    /**基于otherBody坐标位置的偏移量，也是selfBody的目标位置*/\r\n    get linearOffset(): any[] {\r\n        return this._linearOffset;\r\n    }\r\n\r\n    set linearOffset(value: any[]) {\r\n        this._linearOffset = value;\r\n        if (this._joint) {\r\n            this._factory.set_MotorJoint_linearOffset(this._joint, value[0], value[1]);\r\n        }\r\n    }\r\n\r\n    /**基于otherBody的角度偏移量，也是selfBody的目标角度*/\r\n    get angularOffset(): number {\r\n        return this._angularOffset;\r\n    }\r\n\r\n    set angularOffset(value: number) {\r\n        this._angularOffset = value;\r\n        if (this._joint) this._factory.set_MotorJoint_SetAngularOffset(this._joint, Utils.toRadian(-value));\r\n    }\r\n\r\n    /**当selfBody偏离目标位置时，为使其恢复到目标位置，马达关节所施加的最大作用力*/\r\n    get maxForce(): number {\r\n        return this._maxForce;\r\n    }\r\n\r\n    set maxForce(value: number) {\r\n        this._maxForce = value;\r\n        if (this._joint) this._factory.set_MotorJoint_SetMaxForce(this._joint, value)\r\n    }\r\n\r\n    /**当selfBody角度与目标角度不同时，为使其达到目标角度，马达关节施加的最大扭力*/\r\n    get maxTorque(): number {\r\n        return this._maxTorque;\r\n    }\r\n\r\n    set maxTorque(value: number) {\r\n        this._maxTorque = value;\r\n        if (this._joint) this._factory.set_MotorJoint_SetMaxTorque(this._joint, value)\r\n    }\r\n\r\n    /**selfBody向目标位置移动时的缓动因子，取值0~1，值越大速度越快*/\r\n    get correctionFactor(): number {\r\n        return this._correctionFactor;\r\n    }\r\n\r\n    set correctionFactor(value: number) {\r\n        this._correctionFactor = value;\r\n        if (this._joint) this._factory.set_MotorJoint_SetCorrectionFactor(this._joint, value)\r\n    }\r\n}","import { JointBase } from \"./JointBase\";\r\nimport { Sprite } from \"../../display/Sprite\"\r\nimport { Event } from \"../../events/Event\"\r\nimport { Point } from \"../../maths/Point\"\r\nimport { Physics2D } from \"../Physics2D\"\r\nimport { RigidBody } from \"../RigidBody\"\r\nimport { ILaya } from \"../../../ILaya\";\r\nimport { physics2D_MouseJointJointDef } from \"./JointDefStructInfo\";\r\n\r\n/**\r\n * 鼠标关节：鼠标关节用于通过鼠标来操控物体。它试图将物体拖向当前鼠标光标的位置。而在旋转方面就没有限制。\r\n */\r\nexport class MouseJoint extends JointBase {\r\n    /**@private */\r\n    private static _temp: physics2D_MouseJointJointDef;\r\n    /**[首次设置有效]关节的自身刚体*/\r\n    selfBody: RigidBody;\r\n    /**[首次设置有效]关节的链接点，是相对于自身刚体的左上角位置偏移，如果不设置，则根据鼠标点击点作为连接点*/\r\n    anchor: any[];\r\n\r\n    /**鼠标关节在拖曳刚体bodyB时施加的最大作用力*/\r\n    private _maxForce: number = 1000;\r\n    /**弹簧系统的震动频率，可以视为弹簧的弹性系数，通常频率应该小于时间步长频率的一半*/\r\n    private _frequency: number = 5;\r\n    /**刚体在回归到节点过程中受到的阻尼比，建议取值0~1*/\r\n    private _dampingRatio: number = 0.7;\r\n\r\n    protected _onEnable(): void {\r\n        (<Sprite>this.owner).mouseEnabled = true;\r\n        this.owner.on(Event.MOUSE_DOWN, this, this.onMouseDown);\r\n    }\r\n    protected _onAwake(): void {\r\n\r\n    }\r\n\r\n    private onMouseDown(): void {\r\n        this._createJoint();\r\n        ILaya.stage.on(Event.MOUSE_MOVE, this, this.onMouseMove);\r\n        ILaya.stage.once(Event.MOUSE_UP, this, this.onStageMouseUp);\r\n        ILaya.stage.once(Event.MOUSE_OUT, this, this.onStageMouseUp);\r\n    }\r\n    /**\r\n     * @override\r\n     * \r\n     */\r\n    protected _createJoint(): void {\r\n        if (!this._joint) {\r\n            this.selfBody = this.selfBody || this.owner.getComponent(RigidBody);\r\n            if (!this.selfBody) throw \"selfBody can not be empty\";\r\n\r\n            var def: physics2D_MouseJointJointDef = MouseJoint._temp || (MouseJoint._temp = new physics2D_MouseJointJointDef());\r\n            if (this.anchor) {\r\n                var anchorPos: Point = (<Sprite>this.selfBody.owner).localToGlobal(Point.TEMP.setTo(this.anchor[0], this.anchor[1]), false, Physics2D.I.worldRoot);\r\n            } else {\r\n                anchorPos = Physics2D.I.worldRoot.globalToLocal(Point.TEMP.setTo(ILaya.stage.mouseX, ILaya.stage.mouseY));\r\n            }\r\n\r\n            def.bodyA = Physics2D.I._emptyBody;\r\n            def.bodyB = this.selfBody.getBody();\r\n            def.target.setValue(anchorPos.x, anchorPos.y);\r\n            def.maxForce = this._maxForce;\r\n            def.dampingRatio = this._dampingRatio;\r\n            def.frequency = this._frequency;\r\n            this._factory.set_rigidbody_Awake(def.bodyB, true);\r\n            this._joint = this._factory.create_MouseJoint(def);\r\n        }\r\n    }\r\n\r\n    private onStageMouseUp(): void {\r\n        ILaya.stage.off(Event.MOUSE_MOVE, this, this.onMouseMove);\r\n        ILaya.stage.off(Event.MOUSE_UP, this, this.onStageMouseUp);\r\n        ILaya.stage.off(Event.MOUSE_OUT, this, this.onStageMouseUp);\r\n        this._factory.removeJoint(this._joint);\r\n        this._joint = null;\r\n    }\r\n\r\n    private onMouseMove(): void {\r\n        if (this._joint) this._factory.set_MouseJoint_target(this._joint, Physics2D.I.worldRoot.mouseX, Physics2D.I.worldRoot.mouseY)\r\n    }\r\n\r\n    protected _onDisable(): void {\r\n        super._onDisable();\r\n        this.owner.off(Event.MOUSE_DOWN, this, this.onMouseDown);\r\n    }\r\n\r\n    /**鼠标关节在拖曳刚体bodyB时施加的最大作用力*/\r\n    get maxForce(): number {\r\n        return this._maxForce;\r\n    }\r\n\r\n    set maxForce(value: number) {\r\n        this._maxForce = value;\r\n        if (this._joint) this._factory.set_MotorJoint_SetMaxForce(this._joint, value);\r\n    }\r\n\r\n    /**弹簧系统的震动频率，可以视为弹簧的弹性系数，通常频率应该小于时间步长频率的一半*/\r\n    get frequency(): number {\r\n        return this._frequency;\r\n    }\r\n\r\n    set frequency(value: number) {\r\n        this._frequency = value;\r\n        if (this._joint) {\r\n            this._factory.set_MouseJoint_frequencyAndDampingRatio(this._joint, this._frequency, this._dampingRatio);\r\n        }\r\n    }\r\n\r\n    /**刚体在回归到节点过程中受到的阻尼比，建议取值0~1*/\r\n    get damping(): number {\r\n        return this._dampingRatio;\r\n    }\r\n\r\n    set damping(value: number) {\r\n        this._dampingRatio = value;\r\n        if (this._joint) {\r\n            this._factory.set_MouseJoint_frequencyAndDampingRatio(this._joint, this._frequency, this._dampingRatio);\r\n        }\r\n    }\r\n}\r\n","import { JointBase } from \"./JointBase\";\r\nimport { Physics2D } from \"../Physics2D\"\r\nimport { RigidBody } from \"../RigidBody\"\r\nimport { physics2D_PrismaticJointDef } from \"./JointDefStructInfo\";\r\nimport { Utils } from \"../../utils/Utils\";\r\n\r\n/**\r\n * 平移关节：移动关节允许两个物体沿指定轴相对移动，它会阻止相对旋转\r\n */\r\nexport class PrismaticJoint extends JointBase {\r\n    /**@private */\r\n    private static _temp: physics2D_PrismaticJointDef;\r\n    /**[首次设置有效]关节的自身刚体*/\r\n    selfBody: RigidBody;\r\n    /**[首次设置有效]关节的连接刚体，可不设置，默认为左上角空刚体*/\r\n    otherBody: RigidBody;\r\n    /**[首次设置有效]关节的控制点，是相对于自身刚体的左上角位置偏移*/\r\n    anchor: any[] = [0, 0];\r\n    /**\r\n     * @deprecated\r\n     * [首次设置有效]一个向量值，描述运动方向，比如1,0是沿X轴向右*/\r\n    _axis: any[] = [1, 0];\r\n    /**[首次设置有效]一个角度，描述运动方向，比如0是沿X轴向右*/\r\n    angle: number = 0;\r\n    /**[首次设置有效]两个刚体是否可以发生碰撞，默认为false*/\r\n    collideConnected: boolean = false;\r\n\r\n    /**是否开启马达，开启马达可使目标刚体运动*/\r\n    private _enableMotor: boolean = false;\r\n    /**启用马达后，在axis坐标轴上移动可以达到的最大速度*/\r\n    private _motorSpeed: number = 0;\r\n    /**启用马达后，可以施加的最大作用力*/\r\n    private _maxMotorForce: number = 10000;\r\n\r\n    /**是否对刚体的移动范围加以约束*/\r\n    private _enableLimit: boolean = false;\r\n    /**启用约束后，刚体移动范围的下限，是距离anchor的偏移量*/\r\n    private _lowerTranslation: number = 0;\r\n    /**启用约束后，刚体移动范围的上限，是距离anchor的偏移量*/\r\n    private _upperTranslation: number = 0;\r\n    /**\r\n     * @override\r\n     * \r\n     */\r\n    protected _createJoint(): void {\r\n        if (!this._joint) {\r\n\r\n            this.selfBody = this.selfBody || this.owner.getComponent(RigidBody);\r\n            if (!this.selfBody) throw \"selfBody can not be empty\";\r\n\r\n            var def: physics2D_PrismaticJointDef = PrismaticJoint._temp || (PrismaticJoint._temp = new physics2D_PrismaticJointDef());\r\n            def.bodyB = this.selfBody.getBody();\r\n            def.bodyA = this.otherBody ? this.otherBody.getBody() : Physics2D.I._emptyBody;\r\n            let p = this.selfBody.getWorldPoint(this.anchor[0], this.anchor[1]);\r\n            def.anchor.setValue(p.x, p.y);\r\n            let radian = Utils.toRadian(this.angle);\r\n            def.axis.setValue(Math.cos(radian), Math.sin(radian));\r\n            def.enableMotor = this._enableMotor;\r\n            def.motorSpeed = this._motorSpeed;\r\n            def.maxMotorForce = this._maxMotorForce;\r\n            def.enableLimit = this._enableLimit;\r\n            def.lowerTranslation = this._lowerTranslation;\r\n            def.upperTranslation = this._upperTranslation;\r\n            def.collideConnected = this.collideConnected;\r\n\r\n            this._joint = this._factory.create_PrismaticJoint(def);\r\n        }\r\n    }\r\n\r\n    /**是否开启马达，开启马达可使目标刚体运动*/\r\n    get enableMotor(): boolean {\r\n        return this._enableMotor;\r\n    }\r\n\r\n    set enableMotor(value: boolean) {\r\n        this._enableMotor = value;\r\n        if (this._joint) this._factory.set_Joint_EnableMotor(this._joint, value);\r\n    }\r\n\r\n    /**启用马达后，在axis坐标轴上移动可以达到的最大速度*/\r\n    get motorSpeed(): number {\r\n        return this._motorSpeed;\r\n    }\r\n\r\n    set motorSpeed(value: number) {\r\n        this._motorSpeed = value;\r\n        if (this._joint) this._factory.set_Joint_SetMotorSpeed(this._joint, value);\r\n    }\r\n\r\n    /**启用马达后，可以施加的最大作用力*/\r\n    get maxMotorForce(): number {\r\n        return this._maxMotorForce;\r\n    }\r\n\r\n    set maxMotorForce(value: number) {\r\n        this._maxMotorForce = value;\r\n        if (this._joint) this._factory.set_Joint_SetMaxMotorTorque(this._joint, value);\r\n    }\r\n\r\n    /**是否对刚体的移动范围加以约束*/\r\n    get enableLimit(): boolean {\r\n        return this._enableLimit;\r\n    }\r\n\r\n    set enableLimit(value: boolean) {\r\n        this._enableLimit = value;\r\n        if (this._joint) this._factory.set_Joint_EnableLimit(this._joint, value);\r\n    }\r\n\r\n    /**启用约束后，刚体移动范围的下限，是距离anchor的偏移量*/\r\n    get lowerTranslation(): number {\r\n        return this._lowerTranslation;\r\n    }\r\n\r\n    set lowerTranslation(value: number) {\r\n        this._lowerTranslation = value;\r\n        if (this._joint) this._factory.set_Joint_SetLimits(this._joint, value, this._upperTranslation);\r\n    }\r\n\r\n    /**启用约束后，刚体移动范围的上限，是距离anchor的偏移量*/\r\n    get upperTranslation(): number {\r\n        return this._upperTranslation;\r\n    }\r\n\r\n    set upperTranslation(value: number) {\r\n        this._upperTranslation = value;\r\n        if (this._joint) this._factory.set_Joint_SetLimits(this._joint, this._lowerTranslation, value);\r\n    }\r\n\r\n    /**\r\n     * @deprecated\r\n     * 启用约束后，刚体移动范围的上限，是距离anchor的偏移量*/\r\n    get axis(): any {\r\n        return this._axis;\r\n    }\r\n\r\n    set axis(value: any) {\r\n        this._axis = value;\r\n        this.angle = Utils.toAngle(Math.atan2(value[1], value[0]));\r\n    }\r\n}","import { JointBase } from \"./JointBase\";\r\nimport { Point } from \"../../maths/Point\"\r\nimport { Physics2D } from \"../Physics2D\"\r\nimport { RigidBody } from \"../RigidBody\"\r\nimport { physics2D_PulleyJointDef } from \"./JointDefStructInfo\";\r\n\r\n/**\r\n * 滑轮关节：它将两个物体接地(ground)并彼此连接，当一个物体上升，另一个物体就会下降\r\n */\r\nexport class PulleyJoint extends JointBase {\r\n    /**@private */\r\n    private static _temp: physics2D_PulleyJointDef;\r\n    /**[首次设置有效]关节的自身刚体*/\r\n    selfBody: RigidBody;\r\n    /**[首次设置有效]关节的连接刚体*/\r\n    otherBody: RigidBody;\r\n    /**[首次设置有效]自身刚体链接点，是相对于自身刚体的左上角位置偏移*/\r\n    selfAnchor: any[] = [0, 0];\r\n    /**[首次设置有效]链接刚体链接点，是相对于otherBody的左上角位置偏移*/\r\n    otherAnchor: any[] = [0, 0];\r\n\r\n    /**[首次设置有效]滑轮上与节点selfAnchor相连接的节点，是相对于自身刚体的左上角位置偏移*/\r\n    selfGroundPoint: any[] = [0, -100];\r\n    /**[首次设置有效]滑轮上与节点otherAnchor相连接的节点，是相对于otherBody的左上角位置偏移*/\r\n    otherGroundPoint: any[] = [0, -100];\r\n    /**[首次设置有效]两刚体移动距离比率*/\r\n    ratio: number = 1;\r\n    /**[首次设置有效]两个刚体是否可以发生碰撞，默认为false*/\r\n    collideConnected: boolean = false;\r\n    /**\r\n     * @override\r\n     */\r\n    protected _createJoint(): void {\r\n        if (!this._joint) {\r\n            if (!this.otherBody) throw \"otherBody can not be empty\";\r\n            this.selfBody = this.selfBody || this.owner.getComponent(RigidBody);\r\n            if (!this.selfBody) throw \"selfBody can not be empty\";\r\n\r\n            var def: physics2D_PulleyJointDef = PulleyJoint._temp || (PulleyJoint._temp = new physics2D_PulleyJointDef);\r\n            def.bodyA = this.otherBody.getBody();\r\n            def.bodyB = this.selfBody.getBody();\r\n            var posA: Point = this.otherBody.getWorldPoint(this.otherAnchor[0], this.otherAnchor[1]);\r\n            def.localAnchorA.setValue(posA.x, posA.y);\r\n            var posB: Point = this.selfBody.getWorldPoint(this.selfAnchor[0], this.selfAnchor[1]);\r\n            def.localAnchorB.setValue(posB.x, posB.y);\r\n            var groundA: Point = this.otherBody.getWorldPoint(this.otherGroundPoint[0], this.otherGroundPoint[1]);\r\n            def.groundAnchorA.setValue(groundA.x, groundA.y);\r\n            var groundB: Point = this.selfBody.getWorldPoint(this.selfGroundPoint[0], this.selfGroundPoint[1]);\r\n            def.groundAnchorB.setValue(groundB.x, groundB.y);\r\n            def.ratio = this.ratio;\r\n            def.collideConnected = this.collideConnected;\r\n            this._joint = Physics2D.I._factory.create_PulleyJoint(def);\r\n        }\r\n    }\r\n}","import { JointBase } from \"./JointBase\";\r\nimport { Sprite } from \"../../display/Sprite\"\r\nimport { Physics2D } from \"../Physics2D\"\r\nimport { RigidBody } from \"../RigidBody\"\r\nimport { physics2D_RevoluteJointDef } from \"./JointDefStructInfo\";\r\nimport { Utils } from \"../../utils/Utils\";\r\n\r\n/**\r\n * 旋转关节强制两个物体共享一个锚点，两个物体相对旋转\r\n */\r\nexport class RevoluteJoint extends JointBase {\r\n    /**@private */\r\n    private static _temp: physics2D_RevoluteJointDef;\r\n    /**[首次设置有效]关节的自身刚体*/\r\n    selfBody: RigidBody;\r\n    /**[首次设置有效]关节的连接刚体，可不设置*/\r\n    otherBody: RigidBody;\r\n    /**[首次设置有效]关节的链接点，是相对于自身刚体的左上角位置偏移*/\r\n    anchor: any[] = [0, 0];\r\n\r\n    /**[首次设置有效]两个刚体是否可以发生碰撞，默认为false*/\r\n    collideConnected: boolean = false;\r\n\r\n    /**是否开启马达，开启马达可使目标刚体运动*/\r\n    private _enableMotor: boolean = false;\r\n    /**启用马达后，可以达到的最大旋转速度*/\r\n    private _motorSpeed: number = 0;\r\n    /**启用马达后，可以施加的最大扭距，如果最大扭矩太小，会导致不旋转*/\r\n    private _maxMotorTorque: number = 10000;\r\n\r\n    /**是否对刚体的旋转范围加以约束*/\r\n    private _enableLimit: boolean = false;\r\n    /**启用约束后，刚体旋转范围的下限角度*/\r\n    private _lowerAngle: number = 0;\r\n    /**启用约束后，刚体旋转范围的上限角度*/\r\n    private _upperAngle: number = 0;\r\n    /**\r\n     * @override\r\n     */\r\n    protected _createJoint(): void {\r\n        if (!this._joint) {\r\n            this.selfBody = this.selfBody || this.owner.getComponent(RigidBody);\r\n            if (!this.selfBody) throw \"selfBody can not be empty\";\r\n            var def: physics2D_RevoluteJointDef = RevoluteJoint._temp || (RevoluteJoint._temp = new physics2D_RevoluteJointDef());\r\n            def.bodyB = this.selfBody.getBody();\r\n            def.bodyA = this.otherBody ? this.otherBody.getBody() : Physics2D.I._emptyBody;\r\n\r\n            let global = this.selfBody.getWorldPoint(this.anchor[0], this.anchor[1]);\r\n            def.anchor.setValue(global.x, global.y);\r\n            def.enableMotor = this._enableMotor;\r\n            def.motorSpeed = this._motorSpeed;\r\n            def.maxMotorTorque = this._maxMotorTorque;\r\n            def.enableLimit = this._enableLimit;\r\n            def.lowerAngle = Utils.toRadian(this._lowerAngle);\r\n            def.upperAngle = Utils.toRadian(this._upperAngle);\r\n            def.collideConnected = this.collideConnected;\r\n\r\n            this._joint = this._factory.create_RevoluteJoint(def);\r\n        }\r\n    }\r\n\r\n    /**是否开启马达，开启马达可使目标刚体运动*/\r\n    get enableMotor(): boolean {\r\n        return this._enableMotor;\r\n    }\r\n\r\n    set enableMotor(value: boolean) {\r\n        this._enableMotor = value;\r\n        if (this._joint) this._factory.set_Joint_EnableMotor(this._joint, value);\r\n    }\r\n\r\n    /**启用马达后，可以达到的最大旋转速度*/\r\n    get motorSpeed(): number {\r\n        return this._motorSpeed;\r\n    }\r\n\r\n    set motorSpeed(value: number) {\r\n        this._motorSpeed = value;\r\n        if (this._joint) this._factory.set_Joint_SetMotorSpeed(this._joint, value);\r\n    }\r\n\r\n    /**启用马达后，可以施加的最大扭距，如果最大扭矩太小，会导致不旋转*/\r\n    get maxMotorTorque(): number {\r\n        return this._maxMotorTorque;\r\n    }\r\n\r\n    set maxMotorTorque(value: number) {\r\n        this._maxMotorTorque = value;\r\n        if (this._joint) this._factory.set_Joint_SetMaxMotorTorque(this._joint, value);\r\n    }\r\n\r\n    /**是否对刚体的旋转范围加以约束*/\r\n    get enableLimit(): boolean {\r\n        return this._enableLimit;\r\n    }\r\n\r\n    set enableLimit(value: boolean) {\r\n        this._enableLimit = value;\r\n        if (this._joint) this._factory.set_Joint_EnableLimit(this._joint, value);\r\n    }\r\n\r\n    /**启用约束后，刚体旋转范围的下限角度*/\r\n    get lowerAngle(): number {\r\n        return this._lowerAngle;\r\n    }\r\n\r\n    set lowerAngle(value: number) {\r\n        this._lowerAngle = value;\r\n        if (this._joint) this._factory.set_Joint_SetLimits(this._joint, Utils.toRadian(value), Utils.toRadian(this._upperAngle));\r\n    }\r\n\r\n    /**启用约束后，刚体旋转范围的上限角度*/\r\n    get upperAngle(): number {\r\n        return this._upperAngle;\r\n    }\r\n\r\n    set upperAngle(value: number) {\r\n        this._upperAngle = value;\r\n        if (this._joint) this._factory.set_Joint_SetLimits(this._joint, Utils.toRadian(this._lowerAngle), Utils.toRadian(value));\r\n    }\r\n}","import { JointBase } from \"./JointBase\";\r\nimport { Point } from \"../../maths/Point\"\r\nimport { RigidBody } from \"../RigidBody\"\r\nimport { physics2D_WeldJointDef } from \"./JointDefStructInfo\";\r\n\r\n/**\r\n * 焊接关节：焊接关节的用途是使两个物体不能相对运动，受到关节的限制，两个刚体的相对位置和角度都保持不变，看上去像一个整体\r\n */\r\nexport class WeldJoint extends JointBase {\r\n    /**@private */\r\n    private static _temp: physics2D_WeldJointDef;\r\n    /**[首次设置有效]关节的自身刚体*/\r\n    selfBody: RigidBody;\r\n    /**[首次设置有效]关节的连接刚体*/\r\n    otherBody: RigidBody;\r\n    /**[首次设置有效]关节的链接点，是相对于自身刚体的左上角位置偏移*/\r\n    anchor: any[] = [0, 0];\r\n    /**[首次设置有效]两个刚体是否可以发生碰撞，默认为false*/\r\n    collideConnected: boolean = false;\r\n\r\n    /**弹簧系统的震动频率，可以视为弹簧的弹性系数，通常频率应该小于时间步长频率的一半*/\r\n    private _frequency: number = 5;\r\n    /**刚体在回归到节点过程中受到的阻尼比，建议取值0~1*/\r\n    private _dampingRatio: number = 0.7;\r\n    /**\r\n     * @override\r\n     */\r\n    protected _createJoint(): void {\r\n        if (!this._joint) {\r\n            if (!this.otherBody) throw \"otherBody can not be empty\";\r\n            this.selfBody = this.selfBody || this.owner.getComponent(RigidBody);\r\n            if (!this.selfBody) throw \"selfBody can not be empty\";\r\n\r\n            var def: physics2D_WeldJointDef = WeldJoint._temp || (WeldJoint._temp = new physics2D_WeldJointDef());\r\n            var anchorPos: Point = this.selfBody.getWorldPoint(this.anchor[0], this.anchor[1]);\r\n            def.bodyA = this.otherBody.getBody();\r\n            def.bodyB = this.selfBody.getBody();\r\n            def.anchor.setValue(anchorPos.x, anchorPos.y);\r\n            def.frequency = this._frequency;\r\n            def.dampingRatio = this._dampingRatio;\r\n            def.collideConnected = this.collideConnected;\r\n            this._joint = this._factory.create_WeldJoint(def);\r\n        }\r\n    }\r\n\r\n    /**弹簧系统的震动频率，可以视为弹簧的弹性系数，通常频率应该小于时间步长频率的一半*/\r\n    get frequency(): number {\r\n        return this._frequency;\r\n    }\r\n\r\n    set frequency(value: number) {\r\n        this._frequency = value;\r\n        if (this._joint) {\r\n            this._factory.set_Joint_frequencyAndDampingRatio(this._joint, this._frequency, this._dampingRatio, false);\r\n        }\r\n    }\r\n\r\n    /**刚体在回归到节点过程中受到的阻尼比，建议取值0~1*/\r\n    get damping(): number {\r\n        return this._dampingRatio;\r\n    }\r\n\r\n    set damping(value: number) {\r\n        this._dampingRatio = value;\r\n        if (this._joint) {\r\n            this._factory.set_Joint_frequencyAndDampingRatio(this._joint, this._frequency, this._dampingRatio, true);\r\n        }\r\n    }\r\n}","import { JointBase } from \"./JointBase\";\r\nimport { Point } from \"../../maths/Point\"\r\nimport { RigidBody } from \"../RigidBody\"\r\nimport { physics2D_WheelJointDef } from \"./JointDefStructInfo\";\r\nimport { Utils } from \"../../utils/Utils\";\r\n\r\n/**\r\n * 轮子关节：围绕节点旋转，包含弹性属性，使得刚体在节点位置发生弹性偏移\r\n */\r\nexport class WheelJoint extends JointBase {\r\n    /**@private */\r\n    private static _temp: physics2D_WheelJointDef;\r\n    /**[首次设置有效]关节的自身刚体*/\r\n    selfBody: RigidBody;\r\n    /**[首次设置有效]关节的连接刚体*/\r\n    otherBody: RigidBody;\r\n    /**[首次设置有效]关节的链接点，是相对于自身刚体的左上角位置偏移*/\r\n    anchor: any[] = [0, 0];\r\n    /**[首次设置有效]两个刚体是否可以发生碰撞，默认为false*/\r\n    collideConnected: boolean = false;\r\n    /**\r\n     * @deprecated\r\n     * [首次设置有效]一个向量值，用于定义弹性运动方向，即轮子在哪个方向可以如弹簧一样压缩和伸展，比如1,0是沿X轴向右，0,1是沿Y轴向下*/\r\n    _axis: any[] = [0, 1];\r\n    /**[首次设置有效]一个角度值，用于定义弹性运动方向，即轮子在哪个方向可以如弹簧一样压缩和伸展，比如0是沿X轴向右, 90是沿Y轴向下*/\r\n    angle: number = 90;\r\n\r\n    /**弹簧系统的震动频率，可以视为弹簧的弹性系数，通常频率应该小于时间步长频率的一半*/\r\n    private _frequency: number = 1;\r\n    /**刚体在回归到节点过程中受到的阻尼比，建议取值0~1*/\r\n    private _dampingRatio: number = 0.7;\r\n\r\n    /**是否开启马达，开启马达可使目标刚体运动*/\r\n    private _enableMotor: boolean = false;\r\n    /**启用马达后，可以达到的最大旋转速度*/\r\n    private _motorSpeed: number = 0;\r\n    /**启用马达后，可以施加的最大扭距，如果最大扭矩太小，会导致不旋转*/\r\n    private _maxMotorTorque: number = 10000;\r\n\r\n    /**是否对刚体的移动范围加以约束*/\r\n    private _enableLimit: boolean = true;\r\n    /**启用约束后，刚体移动范围的下限，是距离anchor的偏移量*/\r\n    private _lowerTranslation: number = 0;\r\n    /**启用约束后，刚体移动范围的上限，是距离anchor的偏移量*/\r\n    private _upperTranslation: number = 0;\r\n\r\n\r\n    /**\r\n     * @override\r\n     */\r\n    protected _createJoint(): void {\r\n        if (!this._joint) {\r\n            if (!this.otherBody) throw \"otherBody can not be empty\";\r\n            this.selfBody = this.selfBody || this.owner.getComponent(RigidBody);\r\n            if (!this.selfBody) throw \"selfBody can not be empty\";\r\n\r\n            var def: physics2D_WheelJointDef = WheelJoint._temp || (WheelJoint._temp = new physics2D_WheelJointDef());\r\n            var anchorPos: Point = this.selfBody.getWorldPoint(this.anchor[0], this.anchor[1]);\r\n            def.anchor.setValue(anchorPos.x, anchorPos.y);\r\n            let radian = Utils.toRadian(this.angle);\r\n            def.axis.setValue(Math.cos(radian), Math.sin(radian));\r\n            def.bodyA = this.otherBody.getBody();\r\n            def.bodyB = this.selfBody.getBody();;\r\n            def.enableMotor = this._enableMotor;\r\n            def.motorSpeed = this._motorSpeed;\r\n            def.maxMotorTorque = this._maxMotorTorque;\r\n            def.collideConnected = this.collideConnected;\r\n            def.enableLimit = this._enableLimit;\r\n            def.lowerTranslation = this._lowerTranslation;\r\n            def.upperTranslation = this._upperTranslation;\r\n            def.frequency = this._frequency;\r\n            def.dampingRatio = this._dampingRatio;\r\n            this._joint = this._factory.create_WheelJoint(def);\r\n        }\r\n    }\r\n\r\n    /**弹簧系统的震动频率，可以视为弹簧的弹性系数，通常频率应该小于时间步长频率的一半*/\r\n    get frequency(): number {\r\n        return this._frequency;\r\n    }\r\n\r\n    set frequency(value: number) {\r\n        this._frequency = value;\r\n        if (this._joint) {\r\n            this._factory.set_Joint_frequencyAndDampingRatio(this._joint, this._frequency, this._dampingRatio, false)\r\n        }\r\n    }\r\n\r\n    /**刚体在回归到节点过程中受到的阻尼比，建议取值0~1*/\r\n    get damping(): number {\r\n        return this._dampingRatio;\r\n    }\r\n\r\n    set damping(value: number) {\r\n        this._dampingRatio = value;\r\n        if (this._joint) {\r\n            this._factory.set_Joint_frequencyAndDampingRatio(this._joint, this._frequency, this._dampingRatio, true)\r\n        }\r\n    }\r\n\r\n    /**是否开启马达，开启马达可使目标刚体运动*/\r\n    get enableMotor(): boolean {\r\n        return this._enableMotor;\r\n    }\r\n\r\n    set enableMotor(value: boolean) {\r\n        this._enableMotor = value;\r\n        if (this._joint) this._factory.set_Joint_EnableMotor(this._joint, value);\r\n    }\r\n\r\n    /**启用马达后，可以达到的最大旋转速度*/\r\n    get motorSpeed(): number {\r\n        return this._motorSpeed;\r\n    }\r\n\r\n    set motorSpeed(value: number) {\r\n        this._motorSpeed = value;\r\n        if (this._joint) this._factory.set_Joint_SetMotorSpeed(this._joint, value);\r\n    }\r\n\r\n    /**启用马达后，可以施加的最大扭距，如果最大扭矩太小，会导致不旋转*/\r\n    get maxMotorTorque(): number {\r\n        return this._maxMotorTorque;\r\n    }\r\n\r\n    set maxMotorTorque(value: number) {\r\n        this._maxMotorTorque = value;\r\n        if (this._joint) this._factory.set_Joint_SetMaxMotorTorque(this._joint, value);\r\n    }\r\n\r\n    /**是否对刚体的移动范围加以约束*/\r\n    get enableLimit(): boolean {\r\n        return this._enableLimit;\r\n    }\r\n\r\n    set enableLimit(value: boolean) {\r\n        this._enableLimit = value;\r\n        if (this._joint) this._factory.set_Joint_EnableLimit(this._joint, value);\r\n    }\r\n\r\n    /**启用约束后，刚体移动范围的下限，是距离anchor的偏移量*/\r\n    get lowerTranslation(): number {\r\n        return this._lowerTranslation;\r\n    }\r\n\r\n    set lowerTranslation(value: number) {\r\n        this._lowerTranslation = value;\r\n        if (this._joint) this._factory.set_Joint_SetLimits(this._joint, value, this._upperTranslation);\r\n    }\r\n\r\n    /**启用约束后，刚体移动范围的上限，是距离anchor的偏移量*/\r\n    get upperTranslation(): number {\r\n        return this._upperTranslation;\r\n    }\r\n\r\n    set upperTranslation(value: number) {\r\n        this._upperTranslation = value;\r\n        if (this._joint) this._factory.set_Joint_SetLimits(this._joint, this._lowerTranslation, value);\r\n    }\r\n\r\n    /**\r\n     * @deprecated\r\n     * 启用约束后，刚体移动范围的上限，是距离anchor的偏移量*/\r\n    get axis(): any {\r\n        return this._axis;\r\n    }\r\n\r\n    set axis(value: any) {\r\n        this._axis = value;\r\n        this.angle = Utils.toAngle(Math.atan2(value[1], value[0]));\r\n    }\r\n}","\r\nimport { Graphics } from \"../display/Graphics\"\r\nimport { Sprite } from \"../display/Sprite\"\r\nimport { Vector2 } from \"../maths/Vector2\";\r\nimport { Context } from \"../resource/Context\"\r\nimport { IPhysiscs2DFactory } from \"./IPhysiscs2DFactory\";\r\n/**\r\n * 物理辅助线\r\n */\r\nexport class Physics2DDebugDraw extends Sprite {\r\n    DrawString_color: string;\r\n    Red: string;\r\n    Green: string;\r\n    /**@protected */\r\n    protected _camera: any;\r\n\r\n    /**@protected */\r\n    protected _mG: Graphics;\r\n    /**@private */\r\n    private _textSp: Sprite;\r\n    /**@protected */\r\n    protected _textG: Graphics;\r\n    /**@protected */\r\n    protected _factory: IPhysiscs2DFactory;\r\n\r\n    /**@protected */\r\n    protected _lineWidth: number;\r\n\r\n    constructor(factory: IPhysiscs2DFactory) {\r\n        super();\r\n        this._factory = factory;\r\n        this.DrawString_color = \"#E69999\";\r\n        this.Red = \"#ff0000\";\r\n        this.Green = \"#00ff00\"\r\n        this._camera = {};\r\n        this._camera.m_center = new Vector2(0, 0);\r\n        this._camera.m_extent = 25;\r\n        this._camera.m_zoom = 1;\r\n        this._camera.m_width = 1280;\r\n        this._camera.m_height = 800;\r\n\r\n        this._mG = new Graphics();\r\n        this.graphics = this._mG;\r\n\r\n        this._textSp = new Sprite();\r\n        this._textG = this._textSp.graphics;\r\n        this.addChild(this._textSp);\r\n    }\r\n\r\n    /**@private \r\n     * @override\r\n    */\r\n    render(ctx: Context, x: number, y: number): void {\r\n        this._renderToGraphic();\r\n        super.render(ctx, x, y);\r\n    }\r\n\r\n\r\n\r\n    /**@private */\r\n    private _renderToGraphic(): void {\r\n        if (this._factory.world) {\r\n            this._textG.clear();\r\n            this._mG.clear();\r\n            this._mG.save();\r\n            this._mG.scale(this._factory.PIXEL_RATIO, this._factory.PIXEL_RATIO);\r\n            this._lineWidth = this._factory.layaToPhyValue(1);\r\n            if (this._factory.world.DebugDraw) // ts源码版box2d\r\n                this._factory.world.DebugDraw();\r\n            else\r\n                this._factory.world.DrawDebugData();\r\n            this._mG.restore();\r\n        }\r\n    }\r\n\r\n\r\n    PushTransform(tx: number, ty: number, angle: number): void {\r\n        this._mG.save();\r\n        this._mG.translate(tx, ty);\r\n        this._mG.rotate(angle);\r\n    }\r\n\r\n    PopTransform(): void {\r\n        this._mG.restore();\r\n    }\r\n\r\n    get mG(): Graphics {\r\n        return this._mG;\r\n    }\r\n\r\n    get textG(): Graphics {\r\n        return this._textG;\r\n    }\r\n\r\n    get lineWidth(): number {\r\n        return this._lineWidth;\r\n    }\r\n\r\n\r\n    get camera(): any {\r\n        return this._camera;\r\n    }\r\n}\r\n","import { ClassUtils } from \"../utils/ClassUtils\";\r\nimport { BoxCollider } from \"./Collider2D/BoxCollider\";\r\nimport { ChainCollider } from \"./Collider2D/ChainCollider\";\r\nimport { CircleCollider } from \"./Collider2D/CircleCollider\";\r\nimport { ColliderBase } from \"./Collider2D/ColliderBase\";\r\nimport { EdgeCollider } from \"./Collider2D/EdgeCollider\";\r\nimport { DistanceJoint } from \"./joint/DistanceJoint\";\r\nimport { GearJoint } from \"./joint/GearJoint\";\r\nimport { JointBase } from \"./joint/JointBase\";\r\nimport { MotorJoint } from \"./joint/MotorJoint\";\r\nimport { MouseJoint } from \"./joint/MouseJoint\";\r\nimport { PrismaticJoint } from \"./joint/PrismaticJoint\";\r\nimport { PulleyJoint } from \"./joint/PulleyJoint\";\r\nimport { RevoluteJoint } from \"./joint/RevoluteJoint\";\r\nimport { WeldJoint } from \"./joint/WeldJoint\";\r\nimport { WheelJoint } from \"./joint/WheelJoint\";\r\nimport { Physics2D } from \"./Physics2D\";\r\nimport { Physics2DDebugDraw } from \"./Physics2DDebugDraw\";\r\nimport { PolygonCollider } from \"./Collider2D/PolygonCollider\";\r\nimport { RigidBody } from \"./RigidBody\";\r\n\r\nlet c = ClassUtils.regClass;\r\nc(\"Physics2D\", Physics2D);\r\nc(\"Physics2DDebugDraw\", Physics2DDebugDraw);\r\nc(\"ColliderBase\", ColliderBase);\r\nc(\"BoxCollider\", BoxCollider);\r\nc(\"ChainCollider\", ChainCollider);\r\nc(\"CircleCollider\", CircleCollider);\r\nc(\"EdgeCollider\", EdgeCollider);\r\nc(\"PolygonCollider\", PolygonCollider);\r\nc(\"RigidBody\", RigidBody);\r\nc(\"JointBase\", JointBase);\r\nc(\"DistanceJoint\", DistanceJoint);\r\nc(\"GearJoint\", GearJoint);\r\nc(\"MotorJoint\", MotorJoint);\r\nc(\"MouseJoint\", MouseJoint);\r\nc(\"PrismaticJoint\", PrismaticJoint);\r\nc(\"PulleyJoint\", PulleyJoint);\r\nc(\"RevoluteJoint\", RevoluteJoint);\r\nc(\"WeldJoint\", WeldJoint);\r\nc(\"WheelJoint\", WheelJoint);"],"mappings":"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","ignoreList":[]}