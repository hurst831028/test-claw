{"version":3,"names":["physics2DwasmFactory","constructor","this","_velocityIterations","_positionIterations","drawFlags_none","drawFlags_shapeBit","_box2d","b2Draw","e_shapeBit","drawFlags_jointBit","e_jointBit","drawFlags_aabbBit","e_aabbBit","drawFlags_pairBit","e_pairBit","drawFlags_centerOfMassBit","e_centerOfMassBit","drawFlags_all","box2d","world","_world","debugDraw","_debugDraw","PIXEL_RATIO","_PIXEL_RATIO","velocityIterations","positionIterations","gravity","GetGravity","value","createPhyVec2","x","y","SetGravity","allowSleeping","GetAllowSleeping","SetAllowSleeping","bodyCount","GetBodyCount","contactCount","GetContactCount","jointCount","GetJointCount","layaToPhyValue","_Re_PIXEL_RATIO","phyToLayaValue","b2Vec2","createPhyFromLayaVec2","initialize","window","Box2D","then","b2LinearStiffness","Promise","resolve","start","Physics2DOption","pixelRatio","Browser","b2World","destroyed","_tempVe21","_tempVe22","_tempPolygonShape","b2PolygonShape","_tempChainShape","b2ChainShape","_tempCircleShape","b2CircleShape","_tempEdgeShape","b2EdgeShape","_tempDistanceJointDef","b2DistanceJointDef","_tempGearJoinDef","b2GearJointDef","_tempPulleyJointDef","b2PulleyJointDef","_tempWheelJointDef","b2WheelJointDef","_tempWeldJointDef","b2WeldJointDef","_tempMouseJointDef","b2MouseJointDef","_tempRevoluteJointDef","b2RevoluteJointDef","_tempMotorJointDef","b2MotorJointDef","_tempPrismaticJointDef","b2PrismaticJointDef","_tempWorldManifold","b2WorldManifold","SetDestructionListener","getDestructionListener","SetContactListener","getContactListener","destroyWorld","destory","destroy","_jsDraw","removeSelf","update","delta","Step","sendEvent","type","contact","GetFixtureA","GetFixtureB","colliderA","collider","colliderB","ownerA","owner","ownerB","__this","getHitInfo","manifold","GetWorldManifold","p","points","args","event","createDebugDraw","flags","Physics2DDebugDraw","ILaya","stage","addChild","zOrder","jsDraw","JSDraw","SetFlags","DrawSegment","bind","DrawPolygon","DrawSolidPolygon","DrawCircle","DrawSolidCircle","DrawTransform","DrawPoint","DrawAABB","SetDebugDraw","removeDebugDraw","setDebugFlag","appendFlags","AppendFlags","clearFlags","ClearFlags","shiftOrigin","ShiftOrigin","createBody","def","b2BodyDef","userData","pointer","body","CreateBody","console","error","removeBody","DestroyBody","createJoint","cls","joint","CreateJoint","castObject","m_userData","removeJoint","DestroyJoint","getJoint_userData","GetUserData","getJoint_userData_destroy","set_Joint_EnableMotor","enableMotor","EnableMotor","set_Joint_SetMotorSpeed","motorSpeed","SetMotorSpeed","set_Joint_SetMaxMotorTorque","maxTorque","SetMaxMotorTorque","set_Joint_EnableLimit","enableLimit","EnableLimit","set_Joint_SetLimits","lowerAngle","upperAngle","SetLimits","set_Joint_frequencyAndDampingRatio","Joint","frequency","dampingRatio","isdamping","out","b2AngularStiffness","GetBodyA","GetBodyB","SetStiffness","stiffness","SetDamping","damping","createDistanceJoint","defStruct","bodyA","bodyB","localAnchorA","Set","localAnchorB","set_collideConnected","collideConnected","length","p1","GetWorldPoint","data","p2","getVec2Length","maxLength","minLength","b2DistanceJoint","set_DistanceJoint_length","SetLength","set_DistanceJoint_MaxLength","SetMaxLength","set_DistanceJoint_MinLength","SetMinLength","set_DistanceJointStiffnessDamping","steffness","create_GearJoint","joint1","joint2","ratio","b2GearJoint","set_GearJoint_SetRatio","radio","SetRatio","create_PulleyJoint","groundVecA","groundAnchorA","groundVecB","groundAnchorB","anchorVecA","anchorVecB","Initialize","b2PulleyJoint","create_WheelJoint","anchorVec","anchor","axis","maxMotorTorque","lowerTranslation","upperTranslation","b2WheelJoint","create_WeldJoint","b2WeldJoint","create_MouseJoint","target","maxForce","GetMass","b2MouseJoint","set_MouseJoint_target","SetTarget","set_MouseJoint_frequencyAndDampingRatio","create_RevoluteJoint","b2RevoluteJoint","create_MotorJoint","linearOffset","angularOffset","correctionFactor","b2MotorJoint","set_MotorJoint_linearOffset","SetLinearOffset","set_MotorJoint_SetAngularOffset","angular","SetAngularOffset","set_MotorJoint_SetMaxForce","SetMaxForce","set_MotorJoint_SetMaxTorque","SetMaxTorque","set_MotorJoint_SetCorrectionFactor","SetCorrectionFactor","create_PrismaticJoint","tdef","maxMotorForce","b2PrismaticJoint","create_boxColliderShape","set_collider_SetAsBox","shape","width","height","pos","scaleX","scaleY","centroid","m_centroid","SetAsBox","create_ChainShape","set_ChainShape_data","arr","loop","len","Clear","ptr_wrapped","createVec2Pointer","CreateLoop","CreateChain","_free","ptr","create_CircleShape","set_CircleShape_radius","radius","scale","m_radius","set_CircleShape_pos","m_p","create_EdgeShape","set_EdgeShape_data","ps","i","n","push","SetTwoSided","create_PolygonShape","set_PolygonShape_data","createFixtureDef","fixtureDef","b2FixtureDef","density","friction","isSensor","restitution","PhysicsShape","BoxShape","PolygonShape","set_shape","ChainShape","CircleShape","EdgeShape","shapeType","_shape","get_fixtureshape","set_fixtureDef_GroupIndex","groupIndex","filter","set_fixtureDef_CategoryBits","categoryBits","set_fixtureDef_maskBits","maskbits","maskBits","createfixture","CreateFixture","GetShape","GetFilterData","resetFixtureData","fixture","SetDensity","SetFriction","SetSensor","SetRestitution","set_fixture_collider","instance","get_fixture_body","GetBody","rigidBody_DestroyFixture","DestroyFixture","rigidBodyDef_Create","rigidbodyDef","position","angle","allowSleep","angularDamping","angularVelocity","bullet","fixedRotation","gravityScale","linearDamping","linearVelocity","getbodyType","get_RigidBody_Position","v2","GetPosition","setValue","get_RigidBody_Angle","GetAngle","set_RigibBody_Transform","SetTransform","get_rigidBody_WorldPoint","get_rigidBody_LocalPoint","GetLocalPoint","rigidBody_applyForce","force","ApplyForce","rigidBody_applyForceToCenter","ApplyForceToCenter","rigidbody_ApplyLinearImpulse","impulse","ApplyLinearImpulse","rigidbody_ApplyLinearImpulseToCenter","ApplyLinearImpulseToCenter","rigidbody_applyTorque","torque","ApplyTorque","set_rigidbody_Velocity","velocity","SetLinearVelocity","set_rigidbody_Awake","awake","SetAwake","get_rigidbody_Mass","get_rigidBody_Center","GetLocalCenter","point","get_rigidBody_IsAwake","IsAwake","get_rigidBody_WorldCenter","GetWorldCenter","set_rigidBody_type","SetType","set_rigidBody_gravityScale","SetGravityScale","set_rigidBody_allowRotation","SetFixedRotation","set_rigidBody_allowSleep","SetSleepingAllowed","set_rigidBody_angularDamping","SetAngularDamping","get_rigidBody_angularVelocity","GetAngularVelocity","set_rigidBody_angularVelocity","SetAngularVelocity","set_rigidBody_linearDamping","SetLinearDamping","get_rigidBody_linearVelocity","GetLinearVelocity","set_rigidBody_linearVelocity","set_rigidBody_bullet","SetBullet","retSet_rigidBody_MassData","ResetMassData","b2_dynamicBody","b2_staticBody","b2_kinematicBody","makeStyleString","color","alpha","cv","colorData","wrapPointer","b2Color","r","toFixed","g","b","getBox2DPoints","vertices","vertexCount","vert","get_x","get_y","mG","drawPoly","lineWidth","center","centerV","drawCircle","cx","cy","drawLine","xf","b2Transform","PushTransform","q","Red","Green","PopTransform","size","camera","m_zoom","m_extent","hsize","drawRect","DrawString","message","textG","fillText","DrawString_color","DrawStringWorld","min","max","hw","hh","cs","linew","listner","JSContactListener","BeginContact","Physics2D","I","_eventList","b2Contact","EndContact","PreSolve","oldManifold","PostSolve","JSDestructionListener","SayGoodbyeJoint","b2Joint","SayGoodbyeFixture","b2Fixture","createWrapPointer","buffer","_malloc","offset","HEAPF32","frequencyHertz","undefined","massA","massB","mass","omega","Math","PI","IA","GetInertia","IB","sqrt","pow","isNullData","compare","NULL","__destroy__","physicShape","_factory"],"sources":["../../src/layaAir/laya/physics/factory/physics2DwasmFactory.ts"],"sourcesContent":["\r\nimport { ILaya } from \"../../../ILaya\";\r\nimport { IV2, Vector2 } from \"../../maths/Vector2\";\r\nimport { ColliderBase } from \"../Collider2D/ColliderBase\";\r\nimport { FixtureBox2DDef, PhysicsShape } from \"../Collider2D/ColliderStructInfo\";\r\nimport { IPhysiscs2DFactory } from \"../IPhysiscs2DFactory\";\r\nimport { Physics2D } from \"../Physics2D\";\r\nimport { Physics2DOption } from \"../Physics2DOption\";\r\nimport { Physics2DDebugDraw } from \"../Physics2DDebugDraw\";\r\nimport { RigidBody2DInfo } from \"../RigidBody2DInfo\";\r\nimport { physics2D_DistancJointDef, physics2D_GearJointDef, physics2D_MotorJointDef, physics2D_MouseJointJointDef, physics2D_PrismaticJointDef, physics2D_PulleyJointDef, physics2D_RevoluteJointDef, physics2D_WeldJointDef, physics2D_WheelJointDef } from \"../joint/JointDefStructInfo\"\r\nimport { Browser } from \"../../utils/Browser\";\r\n\r\nconst b2_maxFloat = 1E+37;\r\n\r\n/**\r\n * 实现Box2D c++  2.4.1 版本\r\n */\r\nexport class physics2DwasmFactory implements IPhysiscs2DFactory {\r\n    private _tempVe21: any;\r\n    private _tempVe22: any;\r\n\r\n    /**@internal box2D Engine */\r\n    _box2d: any;\r\n\r\n    /**@internal box2D world */\r\n    _world: any;\r\n\r\n    /**@internal  */\r\n    _debugDraw: Physics2DDebugDraw;\r\n\r\n    /**@internal  */\r\n    private _jsDraw: any;\r\n\r\n    /**@internal 旋转迭代次数，增大数字会提高精度，但是会降低性能*/\r\n    _velocityIterations: number = 8;\r\n\r\n    /**@internal 位置迭代次数，增大数字会提高精度，但是会降低性能*/\r\n    _positionIterations: number = 3;\r\n\r\n    /**@internal 像素转换米的转换比率*/\r\n    _PIXEL_RATIO: number;\r\n\r\n    /**@internal 米转换像素的转换比率*/\r\n    _Re_PIXEL_RATIO: number;\r\n\r\n\r\n    /**@internal  */\r\n    protected _tempDistanceJointDef: any;\r\n\r\n    /**@internal  */\r\n    protected _tempGearJoinDef: any;\r\n\r\n    /**@internal  */\r\n    protected _tempPulleyJointDef: any;\r\n\r\n    /**@internal  */\r\n    protected _tempWheelJointDef: any;\r\n\r\n    /**@internal  */\r\n    protected _tempWeldJointDef: any;\r\n\r\n    /**@internal  */\r\n    protected _tempMouseJointDef: any;\r\n\r\n    /**@internal  */\r\n    protected _tempRevoluteJointDef: any;\r\n\r\n    /**@internal  */\r\n    protected _tempMotorJointDef: any;\r\n\r\n    /**@internal  */\r\n    protected _tempPrismaticJointDef: any;\r\n\r\n    /**@internal  */\r\n    protected _tempPolygonShape: any;\r\n    /**@internal  */\r\n    protected _tempChainShape: any;\r\n    /**@internal  */\r\n    protected _tempCircleShape: any;\r\n    /**@internal  */\r\n    protected _tempEdgeShape: any;\r\n    /**@internal  */\r\n    protected _tempWorldManifold: any;\r\n\r\n\r\n\r\n    /** \r\n    * @internal\r\n    */\r\n    get drawFlags_none(): number {\r\n        return 0;\r\n    }\r\n\r\n    /** \r\n     * @internal\r\n     */\r\n    get drawFlags_shapeBit(): number {\r\n        return this._box2d.b2Draw.e_shapeBit;\r\n    }\r\n\r\n    /** \r\n     * @internal\r\n     */\r\n    get drawFlags_jointBit(): number {\r\n        return this._box2d.b2Draw.e_jointBit;\r\n    }\r\n\r\n    /** \r\n     * @internal\r\n     */\r\n    get drawFlags_aabbBit(): number {\r\n        return this._box2d.b2Draw.e_aabbBit;\r\n    }\r\n\r\n    /** \r\n     * @internal\r\n     */\r\n    get drawFlags_pairBit(): number {\r\n        return this._box2d.b2Draw.e_pairBit;\r\n    }\r\n\r\n    /** \r\n     * @internal\r\n     */\r\n    get drawFlags_centerOfMassBit(): number {\r\n        return this._box2d.b2Draw.e_centerOfMassBit;\r\n    }\r\n\r\n    /** \r\n     * @internal\r\n     */\r\n    get drawFlags_all(): number {\r\n        return 63;\r\n    }\r\n\r\n    /** \r\n     * @internal\r\n     */\r\n    get box2d(): any {\r\n        return this._box2d;\r\n    }\r\n\r\n    /** \r\n     * @internal\r\n     */\r\n    get world(): any {\r\n        return this._world;\r\n    }\r\n\r\n    /** \r\n     * @internal\r\n     */\r\n    get debugDraw(): Physics2DDebugDraw {\r\n        return this._debugDraw;\r\n    }\r\n\r\n    /** \r\n     * @internal\r\n     */\r\n    get PIXEL_RATIO(): number {\r\n        return this._PIXEL_RATIO;\r\n    }\r\n\r\n    /** \r\n     * @internal\r\n     */\r\n    get velocityIterations(): number {\r\n        return this._velocityIterations;\r\n    }\r\n\r\n    /** \r\n     * @internal\r\n     */\r\n    get positionIterations(): number {\r\n        return this._positionIterations;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * 物理世界重力环境，默认值为{x:0,y:1}\r\n     * 如果修改y方向重力方向向上，可以直接设置gravity.y=-1;\r\n     */\r\n    get gravity(): any {\r\n        return this.world.GetGravity();\r\n    }\r\n\r\n    set gravity(value: Vector2) {\r\n        var gravity: any = this.createPhyVec2(value.x, value.y);//TODO 全局设置，不必New\r\n        this.world.SetGravity(gravity);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * 设置是否允许休眠，休眠可以提高稳定性和性能，但通常会牺牲准确性\r\n     */\r\n    get allowSleeping(): boolean {\r\n        return this.world.GetAllowSleeping();\r\n    }\r\n\r\n    set allowSleeping(value: boolean) {\r\n        this.world.SetAllowSleeping(value);\r\n    }\r\n\r\n\r\n    /**@internal 获得刚体总数量*/\r\n    get bodyCount(): number {\r\n        return this.world.GetBodyCount();\r\n    }\r\n\r\n    /**@internal 获得碰撞总数量*/\r\n    get contactCount(): number {\r\n        return this.world.GetContactCount();\r\n    }\r\n\r\n    /**@internal 获得关节总数量*/\r\n    get jointCount(): number {\r\n        return this.world.GetJointCount();\r\n    }\r\n\r\n\r\n    /**\r\n     * @internal\r\n     * 渲染系统数据转换为物理系统数据 \r\n     */\r\n    layaToPhyValue(value: number): number {\r\n        return value * this._Re_PIXEL_RATIO;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * 物理系统数据转换为渲染系统数据 \r\n     */\r\n    phyToLayaValue(value: number): number {\r\n        return value * this.PIXEL_RATIO;\r\n    }\r\n\r\n    /** \r\n     * @internal\r\n     * 创建物理系统的Vec2\r\n     * @param x (单位： 米)\r\n     * @param y (单位： 米)\r\n     */\r\n    createPhyVec2(x: number, y: number): any {\r\n        return new this.box2d.b2Vec2(x, y);\r\n    }\r\n\r\n    /** \r\n     * @internal\r\n     * 创建物理系统的Vec2\r\n     * @param x (单位： 像素)\r\n     * @param y (单位： 像素)\r\n     */\r\n    createPhyFromLayaVec2(x: number, y: number): any {\r\n        return new this.box2d.b2Vec2(this.layaToPhyValue(x), this.layaToPhyValue(y));\r\n    }\r\n\r\n    /**\r\n     * initial box2D physics Engine\r\n     * @returns \r\n     */\r\n    initialize(): Promise<void> {\r\n        return (window as any).Box2D().then((box2d: any) => {\r\n            this._box2d = box2d;\r\n            this._box2d.b2LinearStiffness = this.b2LinearStiffness;\r\n            return Promise.resolve();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * create Box2D world\r\n     */\r\n    start() {\r\n        this._PIXEL_RATIO = Physics2DOption.pixelRatio * Browser.pixelRatio;;\r\n        this._Re_PIXEL_RATIO = 1 / this._PIXEL_RATIO;\r\n        var gravity: any = this.createPhyVec2(Physics2DOption.gravity.x, Physics2DOption.gravity.y);\r\n        this._world = new this.box2d.b2World(gravity);\r\n        this._world.destroyed = false;\r\n\r\n        this._tempVe21 = new this.box2d.b2Vec2();\r\n        this._tempVe22 = new this.box2d.b2Vec2();\r\n\r\n        this._tempPolygonShape = new this.box2d.b2PolygonShape();\r\n        this._tempChainShape = new this.box2d.b2ChainShape();\r\n        this._tempCircleShape = new this.box2d.b2CircleShape();\r\n        this._tempEdgeShape = new this.box2d.b2EdgeShape();\r\n\r\n        this._tempDistanceJointDef = new this.box2d.b2DistanceJointDef();\r\n        this._tempGearJoinDef = new this.box2d.b2GearJointDef();\r\n        this._tempPulleyJointDef = new this.box2d.b2PulleyJointDef();\r\n        this._tempWheelJointDef = new this.box2d.b2WheelJointDef();\r\n        this._tempWeldJointDef = new this.box2d.b2WeldJointDef();\r\n        this._tempMouseJointDef = new this.box2d.b2MouseJointDef();\r\n        this._tempRevoluteJointDef = new this.box2d.b2RevoluteJointDef();\r\n        this._tempMotorJointDef = new this.box2d.b2MotorJointDef();\r\n        this._tempPrismaticJointDef = new this.box2d.b2PrismaticJointDef();\r\n        this._tempWorldManifold = new this.box2d.b2WorldManifold();\r\n\r\n        this.world.SetDestructionListener(this.getDestructionListener());\r\n        this.world.SetContactListener(this.getContactListener());\r\n        this.allowSleeping = Physics2DOption.allowSleeping == null ? true : Physics2DOption.allowSleeping;\r\n        this._velocityIterations = Physics2DOption.velocityIterations;\r\n        this._positionIterations = Physics2DOption.positionIterations;\r\n    }\r\n\r\n    /**\r\n    * @internal\r\n    * destroy Box2D world\r\n    * @param options \r\n    */\r\n    destroyWorld() {\r\n        if (this._tempVe21) {\r\n            this.destory(this._tempVe21);\r\n            this._tempVe21 = null;\r\n        }\r\n        if (this._tempVe22) {\r\n            this.destory(this._tempVe22);\r\n            this._tempVe22 = null;\r\n        }\r\n\r\n        if (this._tempPolygonShape) {\r\n            this.destory(this._tempPolygonShape);\r\n            this._tempPolygonShape = null;\r\n        }\r\n        if (this._tempChainShape) {\r\n            this.destory(this._tempChainShape);\r\n            this._tempChainShape = null;\r\n        }\r\n        if (this._tempCircleShape) {\r\n            this.destory(this._tempCircleShape);\r\n            this._tempCircleShape = null;\r\n        }\r\n        if (this._tempEdgeShape) {\r\n            this.destory(this._tempEdgeShape);\r\n            this._tempEdgeShape = null;\r\n        }\r\n\r\n        if (this._tempDistanceJointDef) {\r\n            this.destory(this._tempDistanceJointDef);\r\n            this._tempDistanceJointDef = null;\r\n        }\r\n        if (this._tempGearJoinDef) {\r\n            this.destory(this._tempGearJoinDef);\r\n            this._tempGearJoinDef = null;\r\n        }\r\n        if (this._tempPulleyJointDef) {\r\n            this.destory(this._tempPulleyJointDef);\r\n            this._tempPulleyJointDef = null;\r\n        }\r\n        if (this._tempWheelJointDef) {\r\n            this.destory(this._tempWheelJointDef);\r\n            this._tempWheelJointDef = null;\r\n        }\r\n        if (this._tempWeldJointDef) {\r\n            this.destory(this._tempWeldJointDef);\r\n            this._tempWeldJointDef = null;\r\n        }\r\n        if (this._tempMouseJointDef) {\r\n            this.destory(this._tempMouseJointDef);\r\n            this._tempMouseJointDef = null;\r\n        }\r\n        if (this._tempRevoluteJointDef) {\r\n            this.destory(this._tempRevoluteJointDef);\r\n            this._tempRevoluteJointDef = null;\r\n        }\r\n        if (this._tempMotorJointDef) {\r\n            this.destory(this._tempMotorJointDef);\r\n            this._tempMotorJointDef = null;\r\n        }\r\n        if (this._tempPrismaticJointDef) {\r\n            this.destory(this._tempPrismaticJointDef);\r\n            this._tempPrismaticJointDef = null;\r\n        }\r\n\r\n        if (this._tempWorldManifold) {\r\n            this.destory(this._tempWorldManifold);\r\n            this._tempWorldManifold = null;\r\n        }\r\n\r\n        if (this._world) {\r\n            this.box2d.destroy(this._world)\r\n            this._world.destroyed = true;\r\n            this._world = null;\r\n        }\r\n        this._jsDraw = null;\r\n        if (this._debugDraw) {\r\n            this._debugDraw.removeSelf()\r\n            this._debugDraw = null\r\n        }\r\n    }\r\n\r\n    /**\r\n     * update Frame\r\n     * @param delta \r\n     */\r\n    update(delta: number): void {\r\n\r\n        //set Physics Position from Engine TODO\r\n        this._world & this._world.Step(delta, this.velocityIterations, this.positionIterations, 3);\r\n\r\n        //set engine Position from Phyiscs TODO\r\n    }\r\n\r\n    /**\r\n     * set Event CallBack\r\n     * @param type \r\n     * @param contact \r\n     */\r\n    sendEvent(type: string, contact: any): void {\r\n        if (contact.GetFixtureA() == null || contact.GetFixtureB() == null) {\r\n            return;\r\n        }\r\n        let colliderA: any = contact.GetFixtureA().collider;\r\n        let colliderB: any = contact.GetFixtureB().collider;\r\n        if (colliderA == null || colliderB == null) {\r\n            return;\r\n        }\r\n        if (colliderA.destroyed || colliderB.destroyed) {\r\n            return;\r\n        }\r\n        let ownerA: any = colliderA.owner;\r\n        let ownerB: any = colliderB.owner;\r\n        let __this = this;\r\n        contact.getHitInfo = function (): any {\r\n            var manifold: any = __this._tempWorldManifold;\r\n            this.GetWorldManifold(manifold);\r\n            //第一点？\r\n            let p: any = manifold.points;\r\n            p.x = __this.phyToLayaValue(p.x);\r\n            p.y = __this.phyToLayaValue(p.y);\r\n            return manifold;\r\n        }\r\n        if (ownerA) {\r\n            var args: any[] = [colliderB, colliderA, contact];\r\n            ownerA.event(type, args);\r\n        }\r\n        if (ownerB) {\r\n            args = [colliderA, colliderB, contact];\r\n            ownerB.event(type, args);\r\n        }\r\n    }\r\n\r\n    /** \r\n     * @internal\r\n     * 创建物理绘制\r\n     */\r\n    createDebugDraw(flags: number) {\r\n        if (this._debugDraw) return;\r\n        this._debugDraw = new Physics2DDebugDraw(this);\r\n        ILaya.stage.addChild(this._debugDraw);\r\n        this._debugDraw.zOrder = 1000;\r\n\r\n        if (this._jsDraw == null) {\r\n            var jsDraw = this._jsDraw = new this.box2d.JSDraw();\r\n            jsDraw.SetFlags(flags);\r\n            jsDraw.DrawSegment = this.DrawSegment.bind(this);\r\n            jsDraw.DrawPolygon = this.DrawPolygon.bind(this);\r\n            jsDraw.DrawSolidPolygon = this.DrawSolidPolygon.bind(this);\r\n            jsDraw.DrawCircle = this.DrawCircle.bind(this);\r\n            jsDraw.DrawSolidCircle = this.DrawSolidCircle.bind(this);\r\n            jsDraw.DrawTransform = this.DrawTransform.bind(this);\r\n            jsDraw.DrawPoint = this.DrawPoint.bind(this);\r\n            jsDraw.DrawAABB = this.DrawAABB.bind(this);\r\n        }\r\n\r\n        this.world.SetDebugDraw(this._jsDraw);\r\n    }\r\n\r\n    /** \r\n     * @internal\r\n     * 删除物理绘制\r\n     */\r\n    removeDebugDraw() {\r\n        if (!this._debugDraw) return;\r\n        this.world.SetDebugDraw(null);\r\n        this._debugDraw.removeSelf()\r\n        this._debugDraw.destroy()\r\n        this._debugDraw = null;\r\n    }\r\n\r\n    /** \r\n     * @internal\r\n     * 更新显示数据\r\n     */\r\n    setDebugFlag(flags: number): void {\r\n        if (this._jsDraw) this._jsDraw.SetFlags(flags);\r\n    }\r\n\r\n    /** \r\n     * @internal\r\n     * 显示标记\r\n     */\r\n    appendFlags(flags: number): void {\r\n        if (this._jsDraw) this._jsDraw.AppendFlags(flags);\r\n    }\r\n\r\n    /** \r\n     * @internal\r\n     * 清除标记\r\n     */\r\n    clearFlags(flags: number): void {\r\n        if (this._jsDraw) this._jsDraw.ClearFlags(flags);\r\n    }\r\n\r\n    /** \r\n     * @internal\r\n     * 移动世界中心点\r\n     * @param x (单位： 像素)\r\n     * @param y (单位： 像素)\r\n     */\r\n    shiftOrigin(x: number, y: number) {\r\n        this._world & this.world.ShiftOrigin({ x: x, y: y });\r\n    }\r\n\r\n    /**\r\n     * create Box2D Body\r\n     * @param def \r\n     * @returns \r\n     */\r\n    createBody(def: any) {\r\n        if (!def) {\r\n            def = new this.box2d.b2BodyDef()\r\n        }\r\n        def.userData = { pointer: 0 };\r\n        if (this.world) {\r\n            let body = this.world.CreateBody(def);\r\n            body.world = this.world;\r\n            return body;\r\n        } else {\r\n            console.error('The physical engine should be initialized first.use \"Physics.enable()\"');\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * remove Box2D Body\r\n     * @param body \r\n     */\r\n    removeBody(body: any): void {\r\n        let world = body.world;\r\n        if (!world.destroyed) world.DestroyBody(body);\r\n    }\r\n\r\n    /**\r\n    * create Box2D Joint\r\n    * @param def \r\n    * @returns \r\n    */\r\n    createJoint(def: any, cls: any = null): any {\r\n        if (this.world) {\r\n            let joint = this.world.CreateJoint(def);\r\n            if (cls != null) {\r\n                joint = this.castObject(joint, cls)\r\n            }\r\n            joint.m_userData = {};\r\n            joint.world = this._world;\r\n            return joint;\r\n        } else {\r\n            console.error('The physical engine should be initialized first.use \"Physics.enable()\"');\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove Box2D Joint\r\n     * @param joint \r\n     */\r\n    removeJoint(joint: any): void {\r\n        if (joint && joint.world && !joint.world.destroyed)\r\n            joint.world.DestroyJoint(joint);\r\n    }\r\n\r\n    /** \r\n     * @param joint \r\n     */\r\n    getJoint_userData(joint: any) {\r\n        return joint.GetUserData();\r\n    }\r\n\r\n    /** \r\n     * @param joint \r\n     */\r\n    getJoint_userData_destroy(joint: any): boolean {\r\n        return joint.GetUserData().pointer == -1;\r\n    }\r\n\r\n    /** \r\n     * @param joint\r\n     * @param enableMotor \r\n     */\r\n    set_Joint_EnableMotor(joint: any, enableMotor: boolean): void {\r\n        joint.EnableMotor(enableMotor);\r\n    }\r\n\r\n    /** \r\n     * @param joint \r\n     * @param motorSpeed \r\n     */\r\n    set_Joint_SetMotorSpeed(joint: any, motorSpeed: number): void {\r\n        joint.SetMotorSpeed(motorSpeed);\r\n    }\r\n\r\n    /** \r\n     * @param joint \r\n     * @param maxTorque \r\n     */\r\n    set_Joint_SetMaxMotorTorque(joint: any, maxTorque: number): void {\r\n        joint.SetMaxMotorTorque(maxTorque);\r\n    }\r\n\r\n    /** \r\n     * @param joint \r\n     * @param enableLimit \r\n     */\r\n    set_Joint_EnableLimit(joint: any, enableLimit: boolean): void {\r\n        joint.EnableLimit(enableLimit);\r\n    }\r\n\r\n    /** \r\n     * @param joint \r\n     * @param lowerAngle \r\n     * @param upperAngle \r\n     */\r\n    set_Joint_SetLimits(joint: any, lowerAngle: number, upperAngle: number): void {\r\n        joint.SetLimits(lowerAngle, upperAngle);\r\n    }\r\n\r\n    /** \r\n     * @param Joint \r\n     * @param frequency \r\n     * @param dampingRatio \r\n     * @param isdamping \r\n     */\r\n    set_Joint_frequencyAndDampingRatio(Joint: any, frequency: number, dampingRatio: number, isdamping: boolean): void {\r\n        let out: any = {}\r\n        this.box2d.b2AngularStiffness(out, frequency, dampingRatio, Joint.GetBodyA(), Joint.GetBodyB());\r\n        if (!isdamping) {\r\n            Joint.SetStiffness(out.stiffness);\r\n        }\r\n        Joint.SetDamping(out.damping);\r\n    }\r\n\r\n    /** \r\n     * @param defStruct \r\n     * @returns\r\n     */\r\n    createDistanceJoint(defStruct: physics2D_DistancJointDef) {\r\n        const def = this._tempDistanceJointDef;\r\n        def.bodyA = defStruct.bodyA;\r\n        def.bodyB = defStruct.bodyB;\r\n        def.localAnchorA.Set(this.layaToPhyValue(defStruct.localAnchorA.x), this.layaToPhyValue(defStruct.localAnchorA.y));\r\n        def.localAnchorB.Set(this.layaToPhyValue(defStruct.localAnchorB.x), this.layaToPhyValue(defStruct.localAnchorB.y));\r\n\r\n        this.b2LinearStiffness(def, defStruct.frequency, defStruct.dampingRatio, def.bodyA, def.bodyB);\r\n        def.set_collideConnected(defStruct.collideConnected);\r\n\r\n        if (defStruct.length > 0) {\r\n            def.length = this.layaToPhyValue(defStruct.length);\r\n        } else {\r\n            var p1: any = def.bodyA.GetWorldPoint(def.localAnchorA);\r\n            let data = { x: p1.x, y: p1.y };\r\n            var p2: any = def.bodyB.GetWorldPoint(def.localAnchorB);\r\n            def.length = this.getVec2Length(data, p2);\r\n        }\r\n\r\n        if (defStruct.maxLength > 0)\r\n            def.maxLength = this.layaToPhyValue(defStruct.maxLength);\r\n        else\r\n            def.maxLength = b2_maxFloat;\r\n\r\n        if (defStruct.minLength > 0)\r\n            def.minLength = this.layaToPhyValue(defStruct.minLength);\r\n        else\r\n            def.minLength = 0;\r\n\r\n        return this.createJoint(def, this.box2d.b2DistanceJoint);\r\n    }\r\n\r\n    /** \r\n     * @param joint \r\n     * @param length \r\n     */\r\n    set_DistanceJoint_length(joint: any, length: number) {\r\n        joint.SetLength(this.layaToPhyValue(length));\r\n    }\r\n\r\n    /** \r\n     * @param joint \r\n     * @param length \r\n     */\r\n    set_DistanceJoint_MaxLength(joint: any, length: number) {\r\n        joint.SetMaxLength(this.layaToPhyValue(length));\r\n    }\r\n\r\n    /** \r\n     * @param joint \r\n     * @param length \r\n     */\r\n    set_DistanceJoint_MinLength(joint: any, length: number) {\r\n        joint.SetMinLength(this.layaToPhyValue(length));\r\n    }\r\n\r\n    /** \r\n     * @param joint \r\n     * @param steffness \r\n     * @param damping \r\n     */\r\n    set_DistanceJointStiffnessDamping(joint: any, steffness: number, damping: number) {\r\n        let out: any = {};\r\n        let bodyA = joint.GetBodyA();\r\n        let bodyB = joint.GetBodyB();\r\n        this.box2d.b2LinearStiffness(out, steffness, damping, bodyA, bodyB);\r\n        joint.SetStiffness(out.stiffness);\r\n        joint.SetDamping(out.damping);\r\n    }\r\n\r\n    /** \r\n     * @param defStruct \r\n     * @returns\r\n     */\r\n    create_GearJoint(defStruct: physics2D_GearJointDef): void {\r\n        let def = this._tempGearJoinDef;\r\n        def.bodyA = defStruct.bodyA;\r\n        def.bodyB = defStruct.bodyB;\r\n        def.joint1 = defStruct.joint1;\r\n        def.joint2 = defStruct.joint2;\r\n        def.ratio = defStruct.ratio;\r\n        def.collideConnected = defStruct.collideConnected;\r\n        return this.createJoint(def, this.box2d.b2GearJoint);\r\n    }\r\n\r\n    /** \r\n     * @param joint \r\n     * @param radio \r\n     */\r\n    set_GearJoint_SetRatio(joint: any, radio: number): void {\r\n        joint.SetRatio(radio);\r\n    }\r\n\r\n    /** \r\n     * @param defStruct \r\n     * @returns\r\n     */\r\n    create_PulleyJoint(defStruct: physics2D_PulleyJointDef): void {\r\n        let def = this._tempPulleyJointDef;\r\n        let groundVecA = this.createPhyFromLayaVec2(defStruct.groundAnchorA.x, defStruct.groundAnchorA.y);\r\n        let groundVecB = this.createPhyFromLayaVec2(defStruct.groundAnchorB.x, defStruct.groundAnchorB.y);\r\n        let anchorVecA = this.createPhyFromLayaVec2(defStruct.localAnchorA.x, defStruct.localAnchorA.y);\r\n        let anchorVecB = this.createPhyFromLayaVec2(defStruct.localAnchorB.x, defStruct.localAnchorB.y);\r\n        def.Initialize(defStruct.bodyA, defStruct.bodyB, groundVecA, groundVecB, anchorVecA, anchorVecB, defStruct.ratio);\r\n        def.collideConnected = defStruct.collideConnected;\r\n        return this.createJoint(def, this.box2d.b2PulleyJoint);\r\n    }\r\n\r\n    /** \r\n     * @param defStruct \r\n     * @returns\r\n     */\r\n    create_WheelJoint(defStruct: physics2D_WheelJointDef) {\r\n        let def = this._tempWheelJointDef;\r\n        let anchorVec = this.createPhyFromLayaVec2(defStruct.anchor.x, defStruct.anchor.y);\r\n        let axis = this.createPhyVec2(defStruct.axis.x, defStruct.axis.y);\r\n        def.Initialize(defStruct.bodyA, defStruct.bodyB, anchorVec, axis);\r\n        def.enableMotor = defStruct.enableMotor;\r\n        def.motorSpeed = defStruct.motorSpeed;\r\n        def.maxMotorTorque = defStruct.maxMotorTorque;\r\n        this.b2LinearStiffness(def, defStruct.frequency, defStruct.dampingRatio, def.bodyA, def.bodyB);\r\n        def.collideConnected = defStruct.collideConnected;\r\n        def.enableLimit = defStruct.enableLimit;\r\n        def.lowerTranslation = this.layaToPhyValue(defStruct.lowerTranslation);\r\n        def.upperTranslation = this.layaToPhyValue(defStruct.upperTranslation);\r\n        return this.createJoint(def, this.box2d.b2WheelJoint);\r\n    }\r\n\r\n    /** \r\n     * @param defStruct \r\n     * @returns\r\n     */\r\n    create_WeldJoint(defStruct: physics2D_WeldJointDef) {\r\n        let def = this._tempWeldJointDef;\r\n        let anchorVec = this.createPhyFromLayaVec2(defStruct.anchor.x, defStruct.anchor.y);\r\n        def.Initialize(defStruct.bodyA, defStruct.bodyB, anchorVec);\r\n        this.b2AngularStiffness(def, defStruct.frequency, defStruct.dampingRatio, defStruct.bodyA, defStruct.bodyB);\r\n        def.collideConnected = defStruct.collideConnected;\r\n        return this.createJoint(def, this.box2d.b2WeldJoint);\r\n    }\r\n\r\n    /** \r\n     * @param def \r\n     * @returns\r\n     */\r\n    create_MouseJoint(defStruct: physics2D_MouseJointJointDef): any {\r\n        let def = this._tempMouseJointDef;\r\n        def.bodyA = defStruct.bodyA;\r\n        def.bodyB = defStruct.bodyB;\r\n        def.target = this.createPhyFromLayaVec2(defStruct.target.x, defStruct.target.y);\r\n        def.maxForce = defStruct.maxForce * defStruct.bodyB.GetMass();\r\n        def.collideConnected = true;\r\n        this.b2LinearStiffness(def, defStruct.frequency, defStruct.dampingRatio, defStruct.bodyA, defStruct.bodyB)\r\n        return this.createJoint(def, this.box2d.b2MouseJoint);\r\n    }\r\n\r\n    /** \r\n     * @param joint \r\n     * @param x \r\n     * @param y \r\n     */\r\n    set_MouseJoint_target(joint: any, x: number, y: number) {\r\n        this._tempVe21.x = this.layaToPhyValue(x);\r\n        this._tempVe21.y = this.layaToPhyValue(y);\r\n        joint.SetTarget(this._tempVe21)\r\n    }\r\n\r\n    /** \r\n     * @param Joint \r\n     * @param frequency \r\n     * @param dampingRatio \r\n     */\r\n    set_MouseJoint_frequencyAndDampingRatio(Joint: any, frequency: number, dampingRatio: number) {\r\n        this.set_DistanceJointStiffnessDamping(Joint, frequency, dampingRatio);\r\n    }\r\n\r\n    /** \r\n     * @param defStruct \r\n     * @returns\r\n     */\r\n    create_RevoluteJoint(defStruct: physics2D_RevoluteJointDef): any {\r\n        let def = this._tempRevoluteJointDef;\r\n        var anchorVec = this.createPhyFromLayaVec2(defStruct.anchor.x, defStruct.anchor.y);\r\n        def.Initialize(defStruct.bodyA, defStruct.bodyB, anchorVec);\r\n        def.enableMotor = defStruct.enableMotor;\r\n        def.motorSpeed = defStruct.motorSpeed;\r\n        def.maxMotorTorque = defStruct.maxMotorTorque;\r\n        def.enableLimit = defStruct.enableLimit;\r\n        def.lowerAngle = defStruct.lowerAngle;\r\n        def.upperAngle = defStruct.upperAngle;\r\n        def.collideConnected = defStruct.collideConnected;\r\n        return this.createJoint(def, this.box2d.b2RevoluteJoint);\r\n    }\r\n\r\n    /** \r\n     * @param defStruct \r\n     * @returns\r\n     */\r\n    create_MotorJoint(defStruct: physics2D_MotorJointDef): any {\r\n        let def = this._tempMotorJointDef;\r\n        def.Initialize(defStruct.bodyA, defStruct.bodyB);\r\n        def.linearOffset = this.createPhyFromLayaVec2(defStruct.linearOffset.x, defStruct.linearOffset.y);\r\n        def.angularOffset = defStruct.angularOffset;\r\n        def.maxForce = defStruct.maxForce;\r\n        def.maxTorque = defStruct.maxTorque;\r\n        def.correctionFactor = defStruct.correctionFactor;\r\n        def.collideConnected = defStruct.collideConnected;\r\n        return this.createJoint(def, this.box2d.b2MotorJoint);\r\n    }\r\n\r\n    /** \r\n     * @param joint \r\n     * @param x \r\n     * @param y \r\n     */\r\n    set_MotorJoint_linearOffset(joint: any, x: number, y: number): void {\r\n        joint.SetLinearOffset(this.createPhyFromLayaVec2(x, y));\r\n    }\r\n\r\n    /** \r\n     * @param joint \r\n     * @param angular\r\n     */\r\n    set_MotorJoint_SetAngularOffset(joint: any, angular: number): void {\r\n        joint.SetAngularOffset(angular);\r\n    }\r\n\r\n    /** \r\n     * @param joint \r\n     * @param maxForce \r\n     */\r\n    set_MotorJoint_SetMaxForce(joint: any, maxForce: number): void {\r\n        joint.SetMaxForce(maxForce);\r\n    }\r\n\r\n    /** \r\n     * @param joint \r\n     * @param maxTorque \r\n     */\r\n    set_MotorJoint_SetMaxTorque(joint: any, maxTorque: number): void {\r\n        joint.SetMaxTorque(maxTorque);\r\n    }\r\n\r\n    /** \r\n     * @param joint \r\n     * @param correctionFactor \r\n     */\r\n    set_MotorJoint_SetCorrectionFactor(joint: any, correctionFactor: number): void {\r\n        joint.SetCorrectionFactor(correctionFactor);\r\n    }\r\n\r\n    /** \r\n     * @param def \r\n     * @returns\r\n     */\r\n    create_PrismaticJoint(def: physics2D_PrismaticJointDef): any {\r\n        let tdef = this._tempPrismaticJointDef;\r\n        let anchorVec = this.createPhyFromLayaVec2(def.anchor.x, def.anchor.y);\r\n        let axis = this.createPhyVec2(def.axis.x, def.axis.y);\r\n        tdef.Initialize(def.bodyA, def.bodyB, anchorVec, axis);\r\n        tdef.enableMotor = def.enableMotor;\r\n        tdef.motorSpeed = def.motorSpeed;\r\n        tdef.maxMotorForce = def.maxMotorForce;\r\n        tdef.enableLimit = def.enableLimit;\r\n        tdef.lowerTranslation = this.layaToPhyValue(def.lowerTranslation);\r\n        tdef.upperTranslation = this.layaToPhyValue(def.upperTranslation);\r\n        tdef.collideConnected = def.collideConnected;\r\n        return this.createJoint(tdef, this.box2d.b2PrismaticJoint);\r\n    }\r\n\r\n    /** \r\n     * @returns\r\n     */\r\n    create_boxColliderShape() {\r\n        return this._tempPolygonShape;\r\n    }\r\n\r\n    /** \r\n     * @param shape \r\n     * @param width \r\n     * @param height \r\n     * @param pos \r\n     * \r\n     */\r\n    set_collider_SetAsBox(shape: any, width: number, height: number, pos: IV2, scaleX: number, scaleY: number) {\r\n        width = this.layaToPhyValue(width * scaleX);\r\n        height = this.layaToPhyValue(height * scaleY);\r\n        let centroid = shape.m_centroid;\r\n        centroid.x = this.layaToPhyValue(pos.x * scaleX);\r\n        centroid.y = this.layaToPhyValue(pos.y * scaleY);\r\n        shape.SetAsBox(width, height, centroid, 0);\r\n    }\r\n\r\n    /** \r\n     * @returns\r\n     */\r\n    create_ChainShape() {\r\n        return this._tempChainShape;\r\n    }\r\n\r\n    /** \r\n     * @param shape \r\n     * @param x \r\n     * @param y \r\n     * @param arr \r\n     * @param loop \r\n     */\r\n    set_ChainShape_data(shape: any, x: number, y: number, arr: number[], loop: boolean, scaleX: number, scaleY: number) {\r\n        let len = arr.length;\r\n        shape.Clear();\r\n        var ptr_wrapped = this.createVec2Pointer(arr, x, y, scaleX, scaleY);\r\n        if (loop) {\r\n            shape.CreateLoop(ptr_wrapped, len >> 1);\r\n        } else {\r\n            shape.CreateChain(ptr_wrapped, len >> 1);\r\n        }\r\n        this._box2d._free(ptr_wrapped.ptr);\r\n    }\r\n\r\n    /** \r\n     * @returns\r\n     */\r\n    create_CircleShape() {\r\n        return this._tempCircleShape;\r\n    }\r\n\r\n\r\n    /** \r\n     * @param shape \r\n     * @param radius \r\n     */\r\n    set_CircleShape_radius(shape: any, radius: number, scale: number) {\r\n        shape.m_radius = this.layaToPhyValue(radius * scale);\r\n    }\r\n\r\n    /** \r\n     * @param shape \r\n     * @param x \r\n     * @param y \r\n     */\r\n    set_CircleShape_pos(shape: any, x: number, y: number, scale: number) {\r\n        shape.m_p.Set(this.layaToPhyValue(x * scale), this.layaToPhyValue(y * scale));\r\n    }\r\n\r\n    /** \r\n     * @returns\r\n     */\r\n    create_EdgeShape() {\r\n        return this._tempEdgeShape;\r\n    }\r\n\r\n    /** \r\n     * @param shape \r\n     * @param x \r\n     * @param y \r\n     * @param arr \r\n     */\r\n    set_EdgeShape_data(shape: any, x: number, y: number, arr: number[], scaleX: number, scaleY: number) {\r\n        let len = arr.length;\r\n        var ps: any[] = [];\r\n        for (var i: number = 0, n: number = len; i < n; i += 2) {\r\n            ps.push(this.createPhyFromLayaVec2((x + arr[i]) * scaleX, (y + arr[i + 1]) * scaleX));\r\n        }\r\n        shape.SetTwoSided(ps[0], ps[1])\r\n    }\r\n\r\n    /** \r\n     * @returns\r\n     */\r\n    create_PolygonShape() {\r\n        return this._tempPolygonShape;\r\n    }\r\n\r\n\r\n    /** \r\n    * @param shape \r\n    * @param x \r\n    * @param y \r\n    * @param arr \r\n    */\r\n    set_PolygonShape_data(shape: any, x: number, y: number, arr: number[], scaleX: number, scaleY: number) {\r\n        let ptr_wrapped = this.createVec2Pointer(arr, x, y, scaleX, scaleY);\r\n        shape.Set(ptr_wrapped, arr.length / 2);\r\n        this._box2d._free(ptr_wrapped.ptr);\r\n    }\r\n\r\n    /**\r\n     * create fixture descript\r\n     * @param fixtureDef \r\n     * @returns \r\n     */\r\n    createFixtureDef(fixtureDef: FixtureBox2DDef) {\r\n        var def: any = new this.box2d.b2FixtureDef();\r\n        def.density = fixtureDef.density;\r\n        def.friction = fixtureDef.friction;\r\n        def.isSensor = fixtureDef.isSensor;\r\n        def.restitution = fixtureDef.restitution;\r\n        switch (fixtureDef.shape) {\r\n            case PhysicsShape.BoxShape:\r\n            case PhysicsShape.PolygonShape:\r\n                def.set_shape(this._tempPolygonShape);\r\n                break;\r\n            case PhysicsShape.ChainShape:\r\n                def.set_shape(this._tempChainShape);\r\n                break;\r\n            case PhysicsShape.CircleShape:\r\n                def.set_shape(this._tempCircleShape)\r\n                break;\r\n            case PhysicsShape.EdgeShape:\r\n                def.set_shape(this._tempEdgeShape);\r\n                break;\r\n        }\r\n        def.world = this._world;\r\n        def.shapeType = fixtureDef.shape;\r\n        def._shape = this.get_fixtureshape(def.shape, fixtureDef.shape);\r\n        return def;\r\n    }\r\n\r\n    /** \r\n     * @param def \r\n     * @param groupIndex \r\n     */\r\n    set_fixtureDef_GroupIndex(def: any, groupIndex: number) {\r\n        def.filter.groupIndex = groupIndex;\r\n    }\r\n\r\n    /** \r\n     * @param def \r\n     * @param categoryBits \r\n     */\r\n    set_fixtureDef_CategoryBits(def: any, categoryBits: number) {\r\n        def.filter.categoryBits = categoryBits;\r\n    }\r\n\r\n    /** \r\n     * @param def \r\n     * @param maskbits \r\n     */\r\n    set_fixtureDef_maskBits(def: any, maskbits: number) {\r\n        def.filter.maskBits = maskbits;\r\n    }\r\n\r\n    /**\r\n    * create fixture by body and def\r\n    * @param body \r\n    * @param def \r\n    */\r\n    createfixture(body: any, fixtureDef: any) {\r\n        let data = body.CreateFixture(fixtureDef);\r\n        data.world = this._world;\r\n        data.shape = this.get_fixtureshape(data.GetShape(), fixtureDef.shapeType);\r\n        data.filter = data.GetFilterData();\r\n        return data;\r\n    }\r\n\r\n    /** \r\n     * @internal\r\n     */\r\n    resetFixtureData(fixture: any, fixtureDef: FixtureBox2DDef): void {\r\n        fixture.SetDensity(fixtureDef.density);\r\n        fixture.SetFriction(fixtureDef.friction);\r\n        fixture.SetSensor(fixtureDef.isSensor);\r\n        fixture.SetRestitution(fixtureDef.restitution);\r\n    }\r\n\r\n    /** \r\n     * @param fixture \r\n     * @param instance \r\n     */\r\n    set_fixture_collider(fixture: any, instance: ColliderBase) {\r\n        fixture.collider = instance;\r\n    }\r\n\r\n    /** \r\n     * @param fixture \r\n     */\r\n    get_fixture_body(fixture: any): any {\r\n        return fixture.GetBody()\r\n    }\r\n\r\n\r\n    /** \r\n     * @param body \r\n     * @param fixture \r\n     */\r\n    rigidBody_DestroyFixture(body: any, fixture: any) {\r\n        if (body.world && !body.world.destroyed) body.DestroyFixture(fixture);\r\n    }\r\n\r\n    /** \r\n     * @param rigidbodyDef \r\n     * @returns\r\n     */\r\n    rigidBodyDef_Create(rigidbodyDef: RigidBody2DInfo): any {\r\n        var def: any = new this.box2d.b2BodyDef();\r\n        def.position.Set(this.layaToPhyValue(rigidbodyDef.position.x), this.layaToPhyValue(rigidbodyDef.position.y));\r\n        def.angle = rigidbodyDef.angle;\r\n        def.allowSleep = rigidbodyDef.allowSleep;\r\n        def.angularDamping = rigidbodyDef.angularDamping;\r\n        def.angularVelocity = rigidbodyDef.angularVelocity;\r\n        def.bullet = rigidbodyDef.bullet;\r\n        def.fixedRotation = rigidbodyDef.fixedRotation;\r\n        def.gravityScale = rigidbodyDef.gravityScale;\r\n        def.linearDamping = rigidbodyDef.linearDamping;\r\n        def.linearVelocity = new this.box2d.b2Vec2(this.layaToPhyValue(rigidbodyDef.linearVelocity.x), this.layaToPhyValue(rigidbodyDef.linearVelocity.y));\r\n        def.type = this.getbodyType(rigidbodyDef.type);\r\n        return this.createBody(def);\r\n    }\r\n\r\n    /** \r\n     * @param body \r\n     * @param v2 \r\n     */\r\n    get_RigidBody_Position(body: any, v2: Vector2) {\r\n        var pos: any = body.GetPosition();\r\n        v2.setValue(this.phyToLayaValue(pos.x), this.phyToLayaValue(pos.y));\r\n    }\r\n\r\n\r\n    /** \r\n     * @param body \r\n     * @returns\r\n     */\r\n    get_RigidBody_Angle(body: any): number {\r\n        return body.GetAngle();\r\n    }\r\n\r\n    /** \r\n     * @param body \r\n     * @param x \r\n     * @param y \r\n     * @param angle \r\n     */\r\n    set_RigibBody_Transform(body: any, x: number, y: number, angle: any) {\r\n        let pos = body.GetPosition();\r\n        pos.x = this.layaToPhyValue(x);\r\n        pos.y = this.layaToPhyValue(y);\r\n        body.SetTransform(pos, angle);\r\n    }\r\n\r\n    /** \r\n     * @param body \r\n     * @param x \r\n     * @param y \r\n     * @returns\r\n     */\r\n    get_rigidBody_WorldPoint(body: any, x: number, y: number): IV2 {\r\n        let data = body.GetWorldPoint(this.createPhyFromLayaVec2(x, y))\r\n        return {\r\n            x: this.phyToLayaValue(data.x),\r\n            y: this.phyToLayaValue(data.y)\r\n        };\r\n    }\r\n\r\n    /** \r\n     * @param body \r\n     * @param x \r\n     * @param y \r\n     */\r\n    get_rigidBody_LocalPoint(body: any, x: number, y: number): IV2 {\r\n        let data = body.GetLocalPoint(this.createPhyFromLayaVec2(x, y))\r\n\r\n        return {\r\n            x: this.phyToLayaValue(data.x),\r\n            y: this.phyToLayaValue(data.y)\r\n        };\r\n    }\r\n\r\n    /** \r\n     * @param body \r\n     * @param force \r\n     * @param position \r\n     */\r\n    rigidBody_applyForce(body: any, force: IV2, position: IV2) {\r\n        this._tempVe21.x = this.layaToPhyValue(position.x);\r\n        this._tempVe21.y = this.layaToPhyValue(position.y);\r\n        this._tempVe22.x = force.x;\r\n        this._tempVe22.y = force.y;\r\n        body.ApplyForce(this._tempVe22, this._tempVe21, false);\r\n    }\r\n\r\n    /** \r\n     * @param body \r\n     * @param force \r\n     */\r\n    rigidBody_applyForceToCenter(body: any, force: IV2) {\r\n        this._tempVe21.x = force.x;\r\n        this._tempVe21.y = force.y;\r\n        body.ApplyForceToCenter(this._tempVe21);\r\n    }\r\n\r\n\r\n    /** \r\n     * @param body \r\n     * @param impulse \r\n     * @param position \r\n     */\r\n    rigidbody_ApplyLinearImpulse(body: any, impulse: IV2, position: IV2) {\r\n        this._tempVe21.x = impulse.x;\r\n        this._tempVe21.y = impulse.y;\r\n        this._tempVe22.x = this.layaToPhyValue(position.x);\r\n        this._tempVe22.y = this.layaToPhyValue(position.y);\r\n        body.ApplyLinearImpulse(this._tempVe21, this._tempVe22);\r\n    }\r\n\r\n    /** \r\n     * @param body \r\n     */\r\n    rigidbody_ApplyLinearImpulseToCenter(body: any, impulse: IV2) {\r\n        this._tempVe21.x = impulse.x;\r\n        this._tempVe21.y = impulse.y;\r\n        body.ApplyLinearImpulseToCenter(this._tempVe21);\r\n    }\r\n\r\n\r\n    /**\r\n    * 对刚体施加扭矩，使其旋转\r\n    * @param\ttorque\t施加的扭矩\r\n    */\r\n    rigidbody_applyTorque(body: any, torque: number): void {\r\n        body.ApplyTorque(torque);\r\n    }\r\n\r\n    /**\r\n     * 设置速度，比如{x:10,y:10}\r\n     * @param\tvelocity\r\n     */\r\n    set_rigidbody_Velocity(body: any, velocity: IV2): void {\r\n        this._tempVe21.x = velocity.x;\r\n        this._tempVe21.y = velocity.y;\r\n        body.SetLinearVelocity(this._tempVe21);\r\n    }\r\n\r\n    /**\r\n     * 设置角度\r\n     * @param\tvalue 单位为弧度\r\n     */\r\n    set_rigidbody_Awake(body: any, awake: boolean): void {\r\n        body.SetAwake(awake);\r\n    }\r\n\r\n    /** \r\n     * 获得刚体质量\r\n     * @param body \r\n     * @returns\r\n     */\r\n    get_rigidbody_Mass(body: any): number {\r\n        return body.GetMass();\r\n    }\r\n\r\n    /**\r\n     * 获得质心的相对节点0,0点的位置偏移\r\n     * @param body \r\n     * @returns\r\n     */\r\n    get_rigidBody_Center(body: any): IV2 {\r\n        let value = body.GetLocalCenter();\r\n        let point: IV2 = { x: 0, y: 0 }\r\n        point.x = this.phyToLayaValue(value.x);\r\n        point.y = this.phyToLayaValue(value.y);\r\n        return point;\r\n    }\r\n\r\n    /** \r\n     * @param body \r\n     */\r\n    get_rigidBody_IsAwake(body: any) {\r\n        return body.IsAwake();\r\n    }\r\n\r\n    /**\r\n     * 获得质心的世界坐标，相对于Physics.I.worldRoot节点\r\n     * @param body \r\n     * @returns\r\n     */\r\n    get_rigidBody_WorldCenter(body: any): IV2 {\r\n        let value = body.GetWorldCenter();\r\n        let point: IV2 = { x: 0, y: 0 }\r\n        point.x = this.phyToLayaValue(value.x);\r\n        point.y = this.phyToLayaValue(value.y);\r\n        return point;\r\n    }\r\n\r\n    /** \r\n     * @param body \r\n     * @param value \r\n     */\r\n    set_rigidBody_type(body: any, value: string) {\r\n        body.SetType(this.getbodyType(value));\r\n    }\r\n\r\n    /** \r\n     * @param body \r\n     * @param value \r\n     */\r\n    set_rigidBody_gravityScale(body: any, value: number) {\r\n        body.SetGravityScale(value);\r\n    }\r\n\r\n    /** \r\n     * @param body \r\n     * @param value \r\n     */\r\n    set_rigidBody_allowRotation(body: any, value: boolean) {\r\n        body.SetFixedRotation(!value);\r\n    }\r\n\r\n    /** \r\n     * @param body \r\n     * @param value \r\n     */\r\n    set_rigidBody_allowSleep(body: any, value: boolean) {\r\n        body.SetSleepingAllowed(value);\r\n    }\r\n\r\n    /** \r\n     * @param body \r\n     * @param value \r\n     */\r\n    set_rigidBody_angularDamping(body: any, value: number) {\r\n        body.SetAngularDamping(value);\r\n    }\r\n\r\n    /** \r\n     * @param body \r\n     * @returns\r\n     */\r\n    get_rigidBody_angularVelocity(body: any): number {\r\n        return body.GetAngularVelocity();\r\n    }\r\n\r\n    /** \r\n     * @param body \r\n     * @param value \r\n     */\r\n    set_rigidBody_angularVelocity(body: any, value: number) {\r\n        body.SetAngularVelocity(value);\r\n    }\r\n\r\n    /** \r\n     * @param body \r\n     * @param value \r\n     */\r\n    set_rigidBody_linearDamping(body: any, value: number) {\r\n        body.SetLinearDamping(value);\r\n    }\r\n\r\n    /** \r\n     * @param body \r\n     * @returns\r\n     */\r\n    get_rigidBody_linearVelocity(body: any): IV2 {\r\n        return body.GetLinearVelocity();\r\n    }\r\n\r\n    /** \r\n     * @param body \r\n     * @param value \r\n     */\r\n    set_rigidBody_linearVelocity(body: any, value: IV2) {\r\n        this._tempVe21.x = this.layaToPhyValue(value.x);\r\n        this._tempVe21.y = this.layaToPhyValue(value.y);\r\n        body.SetLinearVelocity(this._tempVe21);\r\n    }\r\n\r\n    /** \r\n     * @param body \r\n     * @param value \r\n     */\r\n    set_rigidBody_bullet(body: any, value: boolean) {\r\n        body.SetBullet(value);\r\n    }\r\n\r\n    /**\r\n    * @param body \r\n    */\r\n    retSet_rigidBody_MassData(body: any) {\r\n        body.ResetMassData()\r\n    }\r\n\r\n    /**@internal */\r\n    getbodyType(type: string): any {\r\n        if (type == \"dynamic\") {\r\n            return this.box2d.b2_dynamicBody;\r\n        } else if (type == \"static\") {\r\n            return this.box2d.b2_staticBody;\r\n        } else if (type == \"kinematic\") {\r\n            return this.box2d.b2_kinematicBody;\r\n        }\r\n    }\r\n\r\n    /**@internal */\r\n    makeStyleString(color: any, alpha: number = -1) {\r\n        let colorData = this.box2d.wrapPointer(color, this.box2d.b2Color);\r\n        let r = (colorData.r * 255).toFixed(1);\r\n        let g = (colorData.g * 255).toFixed(1);\r\n        let b = (colorData.b * 255).toFixed(1);\r\n\r\n        let cv: string;\r\n        if (alpha > 0) {\r\n            cv = `rgba(${r},${g},${b},${alpha})`;\r\n        }\r\n        else {\r\n            cv = `rgb(${r},${g},${b})`;\r\n        }\r\n        return cv;\r\n    }\r\n\r\n    /**@internal */\r\n    private getBox2DPoints(vertices: any, vertexCount: any) {\r\n        let i: number, len: number;\r\n        len = vertices.length;\r\n        let points: any[] = [];\r\n        for (i = 0; i < vertexCount; i++) {\r\n            let vert = this.box2d.wrapPointer(vertices + (i * 8), this.box2d.b2Vec2);\r\n            points.push(vert.get_x(), vert.get_y());\r\n        }\r\n        return points;\r\n    }\r\n\r\n    /**@internal */\r\n    DrawPolygon(vertices: any, vertexCount: any, color: any): void {\r\n        let points: any[] = this.getBox2DPoints(vertices, vertexCount);\r\n        this._debugDraw.mG.drawPoly(0, 0, points, null, this.makeStyleString(color, 1), this._debugDraw.lineWidth);\r\n    }\r\n\r\n    /**@internal */\r\n    DrawSolidPolygon(vertices: any, vertexCount: any, color: any): void {\r\n        let points: any[] = this.getBox2DPoints(vertices, vertexCount);\r\n        this._debugDraw.mG.drawPoly(0, 0, points, this.makeStyleString(color, 0.5), this.makeStyleString(color, 1), this._debugDraw.lineWidth);\r\n    }\r\n\r\n    /**@internal */\r\n    DrawCircle(center: any, radius: any, color: any): void {\r\n        let centerV = this.box2d.wrapPointer(center, this.box2d.b2Vec2);\r\n        this._debugDraw.mG.drawCircle(centerV.x, centerV.y, radius, null, this.makeStyleString(color, 1), this._debugDraw.lineWidth);\r\n    }\r\n\r\n    /**@internal */\r\n    DrawSolidCircle(center: any, radius: any, axis: any, color: any): void {\r\n        center = this.box2d.wrapPointer(center, this.box2d.b2Vec2);\r\n        axis = this.box2d.wrapPointer(axis, this.box2d.b2Vec2);\r\n        let cx: any = center.x;\r\n        let cy: any = center.y;\r\n        this._debugDraw.mG.drawCircle(cx, cy, radius, this.makeStyleString(color, 0.5), this.makeStyleString(color, 1), this._debugDraw.lineWidth);\r\n        this._debugDraw.mG.drawLine(cx, cy, (cx + axis.x * radius), (cy + axis.y * radius), this.makeStyleString(color, 1), this._debugDraw.lineWidth);\r\n    }\r\n\r\n    /**@internal */\r\n    DrawSegment(p1: any, p2: any, color: any): void {\r\n        p1 = this.box2d.wrapPointer(p1, this.box2d.b2Vec2);\r\n        p2 = this.box2d.wrapPointer(p2, this.box2d.b2Vec2);\r\n        this._debugDraw.mG.drawLine(p1.x, p1.y, p2.x, p2.y, this.makeStyleString(color, 1), this._debugDraw.lineWidth);\r\n    }\r\n\r\n    /**@internal */\r\n    DrawTransform(xf: any): void {\r\n        xf = this.box2d.wrapPointer(xf, this.box2d.b2Transform);\r\n        this._debugDraw.PushTransform(xf.p.x, xf.p.y, xf.q.GetAngle());\r\n        const length = 1 / Browser.pixelRatio;\r\n        this._debugDraw.mG.drawLine(0, 0, length, 0, this._debugDraw.Red, this._debugDraw.lineWidth);\r\n        this._debugDraw.mG.drawLine(0, 0, 0, length, this._debugDraw.Green, this._debugDraw.lineWidth);\r\n        this._debugDraw.PopTransform();\r\n    }\r\n\r\n    /**@internal */\r\n    DrawPoint(p: any, size: any, color: any): void {\r\n        p = this.box2d.wrapPointer(p, this.box2d.b2Vec2);\r\n        size *= this._debugDraw.camera.m_zoom;\r\n        size /= this._debugDraw.camera.m_extent;\r\n        size /= Browser.pixelRatio;\r\n        var hsize: any = size / 2;\r\n        this._debugDraw.mG.drawRect(p.x - hsize, p.y - hsize, size, size, this.makeStyleString(color, 1), null);\r\n    }\r\n\r\n    /**@internal */\r\n    DrawString(x: any, y: any, message: any): void {\r\n        this._debugDraw.textG.fillText(message, x, y, \"15px DroidSans\", this._debugDraw.DrawString_color, \"left\");\r\n    }\r\n\r\n    /**@internal */\r\n    DrawStringWorld(x: any, y: any, message: any): void {\r\n        this.DrawString(x, y, message);\r\n    }\r\n\r\n    /**@internal */\r\n    DrawAABB(min: any, max: any, color: any): void {\r\n        min = this.box2d.wrapPointer(min, this.box2d.b2Vec2);\r\n        max = this.box2d.wrapPointer(max, this.box2d.b2Vec2);\r\n        var cx: number = (max.x + min.x) * 0.5;\r\n        var cy: number = (max.y + min.y) * 0.5;\r\n        var hw: number = (max.x - min.x) * 0.5;\r\n        var hh: number = (max.y - min.y) * 0.5;\r\n        const cs: string = this.makeStyleString(color, 1);\r\n        const linew: number = this._debugDraw.lineWidth;\r\n        this._debugDraw.mG.drawLine(cx - hw, cy - hh, cx + hw, cy - hh, cs, linew);\r\n        this._debugDraw.mG.drawLine(cx - hw, cy + hh, cx + hw, cy + hh, cs, linew);\r\n        this._debugDraw.mG.drawLine(cx - hw, cy - hh, cx - hw, cy + hh, cs, linew);\r\n        this._debugDraw.mG.drawLine(cx + hw, cy - hh, cx + hw, cy + hh, cs, linew);\r\n    }\r\n\r\n    /**@internal */\r\n    getContactListener() {\r\n        let box2d = this.box2d;\r\n        let _this = this;\r\n        var listner = new this.box2d.JSContactListener();\r\n        listner.BeginContact = function (contact: any): void {\r\n            Physics2D.I._eventList.push(\"triggerenter\", box2d.wrapPointer(contact, box2d.b2Contact));\r\n        }\r\n\r\n        listner.EndContact = function (contact: any): void {\r\n            Physics2D.I._eventList.push(\"triggerexit\", box2d.wrapPointer(contact, box2d.b2Contact));\r\n        }\r\n\r\n        listner.PreSolve = function (contact: any, oldManifold: any): void {\r\n            Physics2D.I._eventList.push(\"triggerstay\", box2d.wrapPointer(contact, box2d.b2Contact));\r\n        }\r\n\r\n        listner.PostSolve = function (contact: any, impulse: any): void {\r\n            //console.log(\"PostSolve\", contact);\r\n        }\r\n        return listner;\r\n    }\r\n\r\n    /**@internal */\r\n    getDestructionListener() {\r\n        var listner = new this.box2d.JSDestructionListener();\r\n        let box2d = this.box2d;\r\n        listner.SayGoodbyeJoint = function (joint: any): void {\r\n            joint = box2d.wrapPointer(joint, box2d.b2Joint);\r\n            joint.GetUserData().pointer = -1;\r\n        }\r\n        listner.SayGoodbyeFixture = function (fixture: any): void {\r\n            fixture = box2d.wrapPointer(fixture, box2d.b2Fixture);\r\n            fixture.GetUserData().pointer = -1;\r\n        }\r\n        return listner;\r\n    }\r\n\r\n    /**@internal */\r\n    castObject(pointer: any, cls: any) {\r\n        return this.box2d.castObject(pointer, cls)\r\n    }\r\n\r\n    /**@internal */\r\n    createWrapPointer(points: number[]): any {\r\n        var len: number = points.length;\r\n        var buffer = this.box2d._malloc(len * 4);\r\n        var offset = 0;\r\n        for (var i: number = 0; i < len; i++) {\r\n            this.box2d.HEAPF32[buffer + offset >> 2] = this.layaToPhyValue(points[i]);\r\n            offset += 4;\r\n        }\r\n        return buffer;\r\n    }\r\n\r\n    /**@internal */\r\n    createVec2Pointer(points: number[], x: number, y: number, scaleX: number, scaleY: number): any {\r\n        var len: number = points.length >> 1;\r\n        var buffer = this.box2d._malloc(len * 8);\r\n        var offset = 0;\r\n        for (var i = 0; i < len; i++) {\r\n            this.box2d.HEAPF32[buffer + offset >> 2] = this.layaToPhyValue((points[2 * i] + x) * scaleX);\r\n            this.box2d.HEAPF32[buffer + (offset + 4) >> 2] = this.layaToPhyValue((points[2 * i + 1] + y) * scaleY);\r\n            offset += 8;\r\n        }\r\n        return this.box2d.wrapPointer(buffer, this.box2d.b2Vec2);\r\n    }\r\n\r\n    /**@internal */\r\n    b2LinearStiffness(def: any, frequencyHertz: number, dampingRatio: number, bodyA: any, bodyB: any) {\r\n        if (bodyA == undefined || bodyB == undefined) {\r\n            def.stiffness = 0;\r\n            def.damping = 0;\r\n            return;\r\n        }\r\n        const massA = bodyA.GetMass();\r\n        const massB = bodyB.GetMass();\r\n        let mass;\r\n        if (massA > 0.0 && massB > 0.0) {\r\n            mass = massA * massB / (massA + massB);\r\n        }\r\n        else if (massA > 0.0) {\r\n            mass = massA;\r\n        }\r\n        else {\r\n            mass = massB;\r\n        }\r\n        const omega = 2.0 * Math.PI * frequencyHertz;\r\n        def.stiffness = mass * omega * omega;\r\n        def.damping = 2.0 * mass * dampingRatio * omega;\r\n    }\r\n\r\n    /**\r\n     * @internal \r\n     * Utility to compute rotational stiffness values frequency and damping ratio\r\n    */\r\n    b2AngularStiffness(def: any, frequencyHertz: number, dampingRatio: number, bodyA: any, bodyB: any) {\r\n        const IA = bodyA.GetInertia();\r\n        const IB = bodyB.GetInertia();\r\n        let I;\r\n        if (IA > 0.0 && IB > 0.0) {\r\n            I = IA * IB / (IA + IB);\r\n        }\r\n        else if (IA > 0.0) {\r\n            I = IA;\r\n        }\r\n        else {\r\n            I = IB;\r\n        }\r\n        const omega = 2.0 * Math.PI * frequencyHertz;\r\n        def.stiffness = I * omega * omega;\r\n        def.damping = 2.0 * I * dampingRatio * omega;\r\n    }\r\n\r\n    /**\r\n     * @internal \r\n    */\r\n    getVec2Length(p1: any, p2: any) {\r\n        return Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2))\r\n    }\r\n\r\n    /**\r\n     * @internal \r\n    */\r\n    isNullData(data: any) {\r\n        return this.box2d.compare(data, this.box2d.NULL)\r\n    }\r\n\r\n    /**\r\n    * @internal \r\n   */\r\n    destory(data: any) {\r\n        data.__destroy__();\r\n    }\r\n\r\n    /** \r\n     * @internal\r\n     */\r\n    get_fixtureshape(shape: any, physicShape: PhysicsShape): any {\r\n        switch (physicShape) {\r\n            case PhysicsShape.BoxShape:\r\n            case PhysicsShape.PolygonShape:\r\n                return this.castObject(shape, this.box2d.b2PolygonShape);\r\n                break;\r\n            case PhysicsShape.ChainShape:\r\n                return this.castObject(shape, this.box2d.b2ChainShape);\r\n                break;\r\n            case PhysicsShape.CircleShape:\r\n                return this.castObject(shape, this.box2d.b2CircleShape);\r\n                break;\r\n            case PhysicsShape.EdgeShape:\r\n                return this.castObject(shape, this.box2d.b2EdgeShape);\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nPhysics2D.I._factory = new physics2DwasmFactory()"],"mappings":"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","ignoreList":[]}